var layouter = require('./layout');

var Box = layouter.Box;
var CBox = layouter.CBox;
var VarBox = layouter.VarBox;
var NumberBox = layouter.NumberBox;
var CodeBox = layouter.CodeBox;
var BfBox = layouter.BfBox;
var OpBox = layouter.OpBox;
var SpBox = layouter.SpBox;

var BCBox = layouter.BCBox;
var ScaleBox = layouter.ScaleBox;
var FracBox = layouter.FracBox;
var StackBox = layouter.StackBox;
var MatrixBox = layouter.MatrixBox;
var HBox = layouter.HBox;
var BBox = layouter.BBox;
var SqrtBox = layouter.SqrtBox;
var DecoBox = layouter.DecoBox;
var SSBox = layouter.SSBox;
var SSStackBox = layouter.SSStackBox;
var FSBox = layouter.FSBox;
var BigOpBox = layouter.BigOpBox;

var OPERATOR_SCALE = 1.5;
var INTEGRATE_SCALE = 2;

var ASCENDER_OPERATOR = 0.976;
var DESCENDER_OPERATOR = 0.4;
var ASCENDER_INTEGRATE = 0.976;
var DESCENDER_INTEGRATE = 0.35;
var OPERATOR_SHIFT = -0.09;
var INTEGRATE_SHIFT = -0.17;

var CBM = function(s){
	return function(){return new CBox(s)}
}
var OBM = function(s){
	return function(){return new OpBox(s)}
}
var BIGOPBM = function(s, scale, ascender, descender){
	return function(){return new BigOpBox( new CBox(s), OPERATOR_SCALE, ASCENDER_OPERATOR, DESCENDER_OPERATOR, OPERATOR_SHIFT)}
}
var INTEGRALBM = function(s, scale, ascender, descender){
	return function(){return new BigOpBox( new CBox(s), INTEGRATE_SCALE, ASCENDER_INTEGRATE, DESCENDER_INTEGRATE, INTEGRATE_SHIFT)}
}
var VBM = function(s){
	return function(){return new VarBox(s)}
}
var SPBM = function(s){
	return function(){return new SpBox(s)}
}


var macros = exports.macros = {};
macros.over = function(left, right){
	return new FracBox(left, right)
}
macros.above = function(upper, lower){
	var upperParts = [upper], lowerParts = [lower]
	if(upper instanceof StackBox) upperParts = upper.parts
	if(lower instanceof StackBox) lowerParts = lower.parts
	return new StackBox(upperParts.concat(lowerParts));
}
macros.aboveleft = function(upper, lower){
	var upperParts = [upper], lowerParts = [lower]
	if(upper instanceof StackBox) upperParts = upper.parts
	if(lower instanceof StackBox) lowerParts = lower.parts
	return new StackBox(upperParts.concat(lowerParts), 'left');
}
macros.squared = function(operand){
	return new SSBox(operand, new CBox('2'));
}
macros.sqrt = macros['sqrt:'] = function(operand){
	return new SqrtBox(operand);
}
macros['^'] = function(base, sup){
	if(base instanceof SSBox && ! base.sup){
		return new SSBox(base.base, sup, base.sub)
	} else {
		return new SSBox(base, sup)
	}
}
macros['_'] = function(base, sub){
	if(base instanceof SSBox && ! base.sub){
		return new SSBox(base.base, base.sup, sub)
	} else {
		return new SSBox(base, null, sub)
	}
}
macros['^^'] = function(base, sup){
	if(base instanceof SSStackBox && ! base.sup){
		return new SSStackBox(base.base, sup, base.sub.content)
	} else {
		return new SSStackBox(base, sup)
	}
}
macros['__'] = function(base, sub){
	if(base instanceof SSStackBox && ! base.sub){
		return new SSStackBox(base.base, base.sup.content, sub)
	} else {
		return new SSStackBox(base, null, sub)
	}
}
macros.set = function(content){
	return new BBox('{', content, '}')
}

macros['rm'] = macros.fn = function(cb){
	if(cb instanceof CBox){
		return new CBox(cb.c)
	} else {
		return cb
	}
}
macros['bf'] = function(cb){
	if(cb instanceof CBox){
		return new BfBox(cb.c)
	} else {
		return cb
	}
}
macros['vr'] = function(cb){
	if(cb instanceof CBox){
		return new VarBox(cb.c)
	} else {
		return cb
	}
}
macros.left = function(bracketLeft, content){
	if(bracketLeft instanceof CBox){
		var bcl = bracketLeft.c
	} else {
		var bcl = ''
	}
	if(content instanceof BBox && content.left.c === ''){
		return new BBox(bcl, content.content, content.right.c)
	} else {
		return new BBox(bcl, content, '')
	}
}

macros.right = function(content, bracketRight){
	if(bracketRight instanceof CBox){
		var bcl = bracketRight.c
	} else {
		var bcl = ''
	}
	if(content instanceof BBox && content.right.c === ''){
		return new BBox(content.left.c, content.content, bcl)
	} else {
		return new BBox('', content, bcl)
	}
}
macros.null = function(){ return null }

// Matrix macros
macros['&'] = function(left, right){
	if(!(left instanceof MatrixBox)) left = new MatrixBox([[left]]);
	var boxes = left.boxes;
	if(!boxes[boxes.length - 1]) boxes[boxes.length - 1] = [];
	boxes[boxes.length - 1].push(right);
	return new MatrixBox(boxes)
}
macros['//'] = function(left, right){
	if(!(left instanceof MatrixBox)) left = new MatrixBox([[left]]);
	var boxes = left.boxes.concat([[right]]);
	return new MatrixBox(boxes);
}
macros['&&'] = function(left, right){
	if(!(left instanceof MatrixBox)) left = new MatrixBox([[left]])
	if(!(right instanceof MatrixBox)) right = new MatrixBox([[right]])
	var rows = Math.max(left.rows, right.rows);
	var columns = left.columns + right.columns
	var m = []
	for(var j = 0; j < rows; j++){
		var r = [];
		for(var k = 0; k < left.columns; k++){
			if(left.boxes[j] && left.boxes[j][k]) r.push(left.boxes[j][k])
			else r.push(null)
		}
		for(var k = 0; k < right.columns; k++){
			if(right.boxes[j] && right.boxes[j][k]) r.push(right.boxes[j][k])
			else r.push(null)
		};
		m[j] = r;
	};
	return new MatrixBox(m)
}
macros['///'] = function(upper, lower){
	if(!(upper instanceof MatrixBox)) upper = new MatrixBox([[upper]])
	if(!(lower instanceof MatrixBox)) lower = new MatrixBox([[lower]])
	return new MatrixBox(upper.boxes.concat(lower.boxes))
}
macros['malign'] = function(left, config){
	if(!(config instanceof CBox)) return left;
	if(!(left instanceof MatrixBox)) return left;
	return new MatrixBox(left.boxes, config.c)
}

macros.underline = function(content){
	return new DecoBox(content, 'underline')
};

(function(){

	var open = function(c){ return function(x){ return this.left(new CBox(c), x) }};
	var close = function(c){ return function(x){ return this.right(x, new CBox(c)) }};
	var sym = CBM;
	var mathchar = CBM;
	var op = OBM;
	var bigop = BIGOPBM;
	var intop = INTEGRALBM;
	var comb = function(s){
		return function(b){
			if(b instanceof CBox){
				b.c += s
				return b
			} else {
				return b
			}
		}
	};
	var punct = function(s){
		return function(){return new BCBox(s)}
	};

	macros['Alpha'] = CBM("\u0391");
	macros['Beta'] = CBM("\u0392");
	macros['Gamma'] = CBM("\u0393");
	macros['Delta'] = CBM("\u0394");
	macros['Epsilon'] = CBM("\u0395");
	macros['Zeta'] = CBM("\u0396");
	macros['Eta'] = CBM("\u0397");
	macros['Theta'] = CBM("\u0398");
	macros['Iota'] = CBM("\u0399");
	macros['Kappa'] = CBM("\u039A");
	macros['Lambda'] = CBM("\u039B");
	macros['Mu'] = CBM("\u039C");
	macros['Nu'] = CBM("\u039D");
	macros['Xi'] = CBM("\u039E");
	macros['Omicron'] = CBM("\u039F");
	macros['Pi'] = CBM("\u03A0");
	macros['Rho'] = CBM("\u03A1");
	macros['Sigma'] = CBM("\u03A3");
	macros['Tau'] = CBM("\u03A4");
	macros['Upsilon'] = CBM("\u03A5");
	macros['Phi'] = CBM("\u03A6");
	macros['Chi'] = CBM("\u03A7");
	macros['Psi'] = CBM("\u03A8");
	macros['Omega'] = CBM("\u03A9");
	macros['alpha'] = VBM("\u03B1");
	macros['beta'] = VBM("\u03B2");
	macros['gamma'] = VBM("\u03B3");
	macros['delta'] = VBM("\u03B4");
	macros['epsilon'] = VBM("\u03B5");
	macros['zeta'] = VBM("\u03B6");
	macros['eta'] = VBM("\u03B7");
	macros['theta'] = VBM("\u03B8");
	macros['iota'] = VBM("\u03B9");
	macros['kappa'] = VBM("\u03BA");
	macros['lambda'] = VBM("\u03BB");
	macros['mu'] = VBM("\u03BC");
	macros['nu'] = VBM("\u03BD");
	macros['xi'] = VBM("\u03BE");
	macros['omicron'] = VBM("\u03BF");
	macros['pi'] = VBM("\u03C0");
	macros['rho'] = VBM("\u03C1");
	macros['sigmaf'] = VBM("\u03C2");
	macros['sigma'] = VBM("\u03C3");
	macros['tau'] = VBM("\u03C4");
	macros['upsilon'] = VBM("\u03C5");
	macros['phi'] = VBM("\u03C6");
	macros['varphi'] = VBM("\u03D5");
	macros['chi'] = VBM("\u03C7");
	macros['psi'] = VBM("\u03C8");
	macros['omega'] = VBM("\u03C9");
	macros['thetasym'] = VBM("\u03D1");
	macros['upsih'] = VBM("\u03D2");
	macros['piv'] = VBM("\u03D6");
	macros['~'] = SPBM('\u2004')
	macros['~~'] = SPBM("\u2002");
	macros['~~~'] = SPBM("\u2003");
	macros['quad'] = SPBM("\u2003");
	macros['qquad'] = SPBM("\u2003\u2003");

	// These are symbols imported from Unicode Math.
	macros.lparen = mathchar("\u0028");
	macros.lbrack = mathchar("\u005B");
	macros.lbrace = mathchar("\u007B");
	macros.squareroot = mathchar("\u221A");
	macros.cuberoot = mathchar("\u221B");
	macros.fourthroot = mathchar("\u221C");
	macros.lceil = mathchar("\u2308");
	macros.lfloor = mathchar("\u230A");
	macros.ulcorner = mathchar("\u231C");
	macros.llcorner = mathchar("\u231E");
	macros.lmoustache = mathchar("\u23B0");
	macros.lbrbrak = mathchar("\u2772");
	macros.lbag = mathchar("\u27C5");
	macros.longdivision = mathchar("\u27CC");
	macros.lBrack = mathchar("\u27E6");
	macros.langle = mathchar("\u27E8");
	macros.lAngle = mathchar("\u27EA");
	macros.Lbrbrak = mathchar("\u27EC");
	macros.lgroup = mathchar("\u27EE");
	macros.lBrace = mathchar("\u2983");
	macros.lParen = mathchar("\u2985");
	macros.llparenthesis = mathchar("\u2987");
	macros.llangle = mathchar("\u2989");
	macros.lbrackubar = mathchar("\u298B");
	macros.lbrackultick = mathchar("\u298D");
	macros.lbracklltick = mathchar("\u298F");
	macros.langledot = mathchar("\u2991");
	macros.lparenless = mathchar("\u2993");
	macros.Lparengtr = mathchar("\u2995");
	macros.lblkbrbrak = mathchar("\u2997");
	macros.lvzigzag = mathchar("\u29D8");
	macros.Lvzigzag = mathchar("\u29DA");
	macros.lcurvyangle = mathchar("\u29FC");
	macros.lbrbrak = mathchar("\u3014");
	macros.Lbrbrak = mathchar("\u3018");

	macros.rparen = mathchar("\u0029");
	macros.rbrack = mathchar("\u005D");
	macros.rbrace = mathchar("\u007D");
	macros.rceil = mathchar("\u2309");
	macros.rfloor = mathchar("\u230B");
	macros.urcorner = mathchar("\u231D");
	macros.lrcorner = mathchar("\u231F");
	macros.rmoustache = mathchar("\u23B1");
	macros.rbrbrak = mathchar("\u2773");
	macros.rbag = mathchar("\u27C6");
	macros.rBrack = mathchar("\u27E7");
	macros.rangle = mathchar("\u27E9");
	macros.rAngle = mathchar("\u27EB");
	macros.Rbrbrak = mathchar("\u27ED");
	macros.rgroup = mathchar("\u27EF");
	macros.rBrace = mathchar("\u2984");
	macros.rParen = mathchar("\u2986");
	macros.rrparenthesis = mathchar("\u2988");
	macros.rrangle = mathchar("\u298A");
	macros.rbrackubar = mathchar("\u298C");
	macros.rbracklrtick = mathchar("\u298E");
	macros.rbrackurtick = mathchar("\u2990");
	macros.rangledot = mathchar("\u2992");
	macros.rparengtr = mathchar("\u2994");
	macros.Rparenless = mathchar("\u2996");
	macros.rblkbrbrak = mathchar("\u2998");
	macros.rvzigzag = mathchar("\u29D9");
	macros.Rvzigzag = mathchar("\u29DB");
	macros.rcurvyangle = mathchar("\u29FD");
	macros.rbrbrak = mathchar("\u3015");
	macros.Rbrbrak = mathchar("\u3019");

	macros['lparen:'] = open("\u0028");
	macros['lbrack:'] = open("\u005B");
	macros['lbrace:'] = open("\u007B");
	macros['squareroot:'] = open("\u221A");
	macros['cuberoot:'] = open("\u221B");
	macros['fourthroot:'] = open("\u221C");
	macros['lceil:'] = open("\u2308");
	macros['lfloor:'] = open("\u230A");
	macros['ulcorner:'] = open("\u231C");
	macros['llcorner:'] = open("\u231E");
	macros['lmoustache:'] = open("\u23B0");
	macros['lbrbrak:'] = open("\u2772");
	macros['lbag:'] = open("\u27C5");
	macros['longdivision:'] = open("\u27CC");
	macros['lBrack:'] = open("\u27E6");
	macros['langle:'] = open("\u27E8");
	macros['lAngle:'] = open("\u27EA");
	macros['Lbrbrak:'] = open("\u27EC");
	macros['lgroup:'] = open("\u27EE");
	macros['lBrace:'] = open("\u2983");
	macros['lParen:'] = open("\u2985");
	macros['llparenthesis:'] = open("\u2987");
	macros['llangle:'] = open("\u2989");
	macros['lbrackubar:'] = open("\u298B");
	macros['lbrackultick:'] = open("\u298D");
	macros['lbracklltick:'] = open("\u298F");
	macros['langledot:'] = open("\u2991");
	macros['lparenless:'] = open("\u2993");
	macros['Lparengtr:'] = open("\u2995");
	macros['lblkbrbrak:'] = open("\u2997");
	macros['lvzigzag:'] = open("\u29D8");
	macros['Lvzigzag:'] = open("\u29DA");
	macros['lcurvyangle:'] = open("\u29FC");
	macros['lbrbrak:'] = open("\u3014");
	macros['Lbrbrak:'] = open("\u3018");

	macros[':rparen'] = close("\u0029");
	macros[':rbrack'] = close("\u005D");
	macros[':rbrace'] = close("\u007D");
	macros[':rceil'] = close("\u2309");
	macros[':rfloor'] = close("\u230B");
	macros[':urcorner'] = close("\u231D");
	macros[':lrcorner'] = close("\u231F");
	macros[':rmoustache'] = close("\u23B1");
	macros[':rbrbrak'] = close("\u2773");
	macros[':rbag'] = close("\u27C6");
	macros[':rBrack'] = close("\u27E7");
	macros[':rangle'] = close("\u27E9");
	macros[':rAngle'] = close("\u27EB");
	macros[':Rbrbrak'] = close("\u27ED");
	macros[':rgroup'] = close("\u27EF");
	macros[':rBrace'] = close("\u2984");
	macros[':rParen'] = close("\u2986");
	macros[':rrparenthesis'] = close("\u2988");
	macros[':rrangle'] = close("\u298A");
	macros[':rbrackubar'] = close("\u298C");
	macros[':rbracklrtick'] = close("\u298E");
	macros[':rbrackurtick'] = close("\u2990");
	macros[':rangledot'] = close("\u2992");
	macros[':rparengtr'] = close("\u2994");
	macros[':Rparenless'] = close("\u2996");
	macros[':rblkbrbrak'] = close("\u2998");
	macros[':rvzigzag'] = close("\u29D9");
	macros[':Rvzigzag'] = close("\u29DB");
	macros[':rcurvyangle'] = close("\u29FD");
	macros[':rbrbrak'] = close("\u3015");
	macros[':Rbrbrak'] = close("\u3019");

	macros.vert = op("\u007C");
	macros.Vert = op("\u2016");
	macros.Vvert = op("\u2980");
	macros.exclam = punct("\u0021");
	macros.comma = punct("\u002C");
	macros.mathcolon = sym("\u003A");
	macros.colon = op("\u003A");
	macros.semicolon = punct("\u003B");


	macros.grave = comb("\u0300");
	macros.acute = comb("\u0301");
	macros.hat = comb("\u0302");
	macros.tilde = comb("\u0303");
	macros.bar = comb("\u0304");
	macros.overbar = comb("\u0305");
	macros.breve = comb("\u0306");
	macros.ovdot = comb("\u0307");
	macros.ovddot = comb("\u0308");
	macros.ovhook = comb("\u0309");
	macros.ocirc = comb("\u030A");
	macros.check = comb("\u030C");
	macros.candra = comb("\u0310");
	macros.oturnedcomma = comb("\u0312");
	macros.ocommatopright = comb("\u0315");
	macros.droang = comb("\u031A");
	macros.not = comb("\u0338");
	macros.leftharpoonaccent = comb("\u20D0");
	macros.rightharpoonaccent = comb("\u20D1");
	macros.vertoverlay = comb("\u20D2");
	macros.overleftarrow = comb("\u20D6");
	macros.vec = comb("\u20D7");
	macros.dddot = comb("\u20DB");
	macros.ddddot = comb("\u20DC");
	macros.overleftrightarrow = comb("\u20E1");
	macros.annuity = comb("\u20E7");
	macros.widebridgeabove = comb("\u20E9");
	macros.asteraccent = comb("\u20F0"); 
	macros.wideutilde = comb("\u0330");
	macros.underbar = comb("\u0331");
	macros.threeunderdot = comb("\u20E8");
	macros.underrightharpoondown = comb("\u20EC");
	macros.underleftharpoondown = comb("\u20ED");
	macros.underleftarrow = comb("\u20EE");
	macros.underrightarrow = comb("\u20EF");

	macros.Bbbsum = bigop("\u2140");
	macros.prod = bigop("\u220F");
	macros.coprod = bigop("\u2210");
	macros.sum = bigop("\u2211");
	macros.int = intop("\u222B");
	macros.iint = intop("\u222C");
	macros.iiint = intop("\u222D");
	macros.oint = intop("\u222E");
	macros.oiint = intop("\u222F");
	macros.oiiint = intop("\u2230");
	macros.intclockwise = intop("\u2231");
	macros.varointclockwise = intop("\u2232");
	macros.ointctrclockwise = intop("\u2233");
	macros.bigwedge = bigop("\u22C0");
	macros.bigvee = bigop("\u22C1");
	macros.bigcap = bigop("\u22C2");
	macros.bigcup = bigop("\u22C3");
	macros.leftouterjoin = bigop("\u27D5");
	macros.rightouterjoin = bigop("\u27D6");
	macros.fullouterjoin = bigop("\u27D7");
	macros.bigbot = bigop("\u27D8");
	macros.bigtop = bigop("\u27D9");
	macros.xsol = bigop("\u29F8");
	macros.xbsol = bigop("\u29F9");
	macros.bigodot = bigop("\u2A00");
	macros.bigoplus = bigop("\u2A01");
	macros.bigotimes = bigop("\u2A02");
	macros.bigcupdot = bigop("\u2A03");
	macros.biguplus = bigop("\u2A04");
	macros.bigsqcap = bigop("\u2A05");
	macros.bigsqcup = bigop("\u2A06");
	macros.conjquant = bigop("\u2A07");
	macros.disjquant = bigop("\u2A08");
	macros.bigtimes = bigop("\u2A09");
	macros.modtwosum = bigop("\u2A0A");
	macros.sumint = intop("\u2A0B");
	macros.iiiint = intop("\u2A0C");
	macros.intbar = intop("\u2A0D");
	macros.intBar = intop("\u2A0E");
	macros.fint = intop("\u2A0F");
	macros.cirfnint = intop("\u2A10");
	macros.awint = intop("\u2A11");
	macros.rppolint = intop("\u2A12");
	macros.scpolint = intop("\u2A13");
	macros.npolint = intop("\u2A14");
	macros.pointint = intop("\u2A15");
	macros.sqint = intop("\u2A16");
	macros.intlarhk = intop("\u2A17");
	macros.intx = intop("\u2A18");
	macros.intcap = intop("\u2A19");
	macros.intcup = intop("\u2A1A");
	macros.upint = intop("\u2A1B");
	macros.lowint = intop("\u2A1C");
	macros.Join = bigop("\u2A1D");
	macros.bigtriangleleft = bigop("\u2A1E");
	macros.zcmp = bigop("\u2A1F");
	macros.zpipe = bigop("\u2A20");
	macros.zproject = bigop("\u2A21");

	macros.plus = op("\u002B");
	macros.pm = op("\u00B1");
	macros.cdotp = op("\u00B7");
	macros.times = op("\u00D7");
	macros.div = op("\u00F7");
	macros.dagger = op("\u2020");
	macros.ddagger = op("\u2021");
	macros.smblkcircle = op("\u2022");
	macros.tieconcat = op("\u2040");
	macros.fracslash = op("\u2044");
	macros.upand = op("\u214B");
	macros.minus = op("\u2212");
	macros.minusx = mathchar("\u2212");
	macros.mp = op("\u2213");
	macros.dotplus = op("\u2214");
	macros.divslash = op("\u2215");
	macros.smallsetminus = op("\u2216");
	macros.ast = op("\u2217");
	macros.vysmwhtcircle = op("\u2218");
	macros.vysmblkcircle = op("\u2219");
	macros.wedge = op("\u2227");
	macros.vee = op("\u2228");
	macros.cap = op("\u2229");
	macros.cup = op("\u222A");
	macros.dotminus = op("\u2238");
	macros.invlazys = op("\u223E");
	macros.wr = op("\u2240");
	macros.cupleftarrow = op("\u228C");
	macros.cupdot = op("\u228D");
	macros.uplus = op("\u228E");
	macros.sqcap = op("\u2293");
	macros.sqcup = op("\u2294");
	macros.oplus = op("\u2295");
	macros.ominus = op("\u2296");
	macros.otimes = op("\u2297");
	macros.oslash = op("\u2298");
	macros.odot = op("\u2299"); 
	macros.circledcirc = op("\u229A");
	macros.circledast = op("\u229B");
	macros.circledequal = op("\u229C");
	macros.circleddash = op("\u229D");
	macros.boxplus = op("\u229E");
	macros.boxminus = op("\u229F");
	macros.boxtimes = op("\u22A0");
	macros.boxdot = op("\u22A1");
	macros.intercal = op("\u22BA");
	macros.veebar = op("\u22BB");
	macros.barwedge = op("\u22BC");
	macros.barvee = op("\u22BD");
	macros.smwhtdiamond = op("\u22C4");
	macros.cdot = op("\u22C5");
	macros.star = op("\u22C6");
	macros.divideontimes = op("\u22C7");
	macros.ltimes = op("\u22C9");
	macros.rtimes = op("\u22CA");
	macros.leftthreetimes = op("\u22CB");
	macros.rightthreetimes = op("\u22CC");
	macros.curlyvee = op("\u22CE");
	macros.curlywedge = op("\u22CF");
	macros.Cap = op("\u22D2");
	macros.Cup = op("\u22D3");
	macros.varbarwedge = op("\u2305");
	macros.vardoublebarwedge = op("\u2306");
	macros.obar = op("\u233D");
	macros.bigtriangleup = op("\u25B3");
	macros.triangleright = op("\u25B7");
	macros.triangleleft = op("\u25C1");
	macros.mdlgwhtcircle = op("\u25CB");
	macros.boxbar = op("\u25EB");
	macros.veedot = op("\u27C7");
	macros.wedgedot = op("\u27D1");
	macros.lozengeminus = op("\u27E0");
	macros.concavediamond = op("\u27E1");
	macros.concavediamondtickleft = op("\u27E2");
	macros.concavediamondtickright = op("\u27E3");
	macros.whitesquaretickleft = op("\u27E4");
	macros.whitesquaretickright = op("\u27E5");
	macros.typecolon = op("\u2982");
	macros.circlehbar = op("\u29B5");
	macros.circledvert = op("\u29B6");
	macros.circledparallel = op("\u29B7");
	macros.obslash = op("\u29B8");
	macros.operp = op("\u29B9");
	macros.olessthan = op("\u29C0");
	macros.ogreaterthan = op("\u29C1");
	macros.boxdiag = op("\u29C4"); 
	macros.boxbslash = op("\u29C5");
	macros.boxast = op("\u29C6");
	macros.boxcircle = op("\u29C7");
	macros.boxbox = op("\u29C8");
	macros.triangleserifs = op("\u29CD");
	macros.hourglass = op("\u29D6");
	macros.blackhourglass = op("\u29D7");
	macros.shuffle = op("\u29E2");
	macros.mdlgblklozenge = op("\u29EB");
	macros.setminus = op("\u29F5");
	macros.dsol = op("\u29F6");
	macros.rsolbar = op("\u29F7");
	macros.doubleplus = op("\u29FA");
	macros.tripleplus = op("\u29FB");
	macros.tplus = op("\u29FE");
	macros.tminus = op("\u29FF");
	macros.ringplus = op("\u2A22");
	macros.plushat = op("\u2A23");
	macros.simplus = op("\u2A24");
	macros.plusdot = op("\u2A25");
	macros.plussim = op("\u2A26");
	macros.plussubtwo = op("\u2A27");
	macros.plustrif = op("\u2A28");
	macros.commaminus = op("\u2A29");
	macros.minusdot = op("\u2A2A");
	macros.minusfdots = op("\u2A2B");
	macros.minusrdots = op("\u2A2C");
	macros.opluslhrim = op("\u2A2D");
	macros.oplusrhrim = op("\u2A2E");
	macros.vectimes = op("\u2A2F");
	macros.dottimes = op("\u2A30");
	macros.timesbar = op("\u2A31");
	macros.btimes = op("\u2A32");
	macros.smashtimes = op("\u2A33");
	macros.otimeslhrim = op("\u2A34");
	macros.otimesrhrim = op("\u2A35");
	macros.otimeshat = op("\u2A36");
	macros.Otimes = op("\u2A37");
	macros.odiv = op("\u2A38");
	macros.triangleplus = op("\u2A39");
	macros.triangleminus = op("\u2A3A");
	macros.triangletimes = op("\u2A3B");
	macros.intprod = op("\u2A3C");
	macros.intprodr = op("\u2A3D");
	macros.fcmp = op("\u2A3E");
	macros.amalg = op("\u2A3F");
	macros.capdot = op("\u2A40");
	macros.uminus = op("\u2A41");
	macros.barcup = op("\u2A42");
	macros.barcap = op("\u2A43"); 
	macros.capwedge = op("\u2A44");
	macros.cupvee = op("\u2A45");
	macros.cupovercap = op("\u2A46");
	macros.capovercup = op("\u2A47");
	macros.cupbarcap = op("\u2A48");
	macros.capbarcup = op("\u2A49");
	macros.twocups = op("\u2A4A");
	macros.twocaps = op("\u2A4B");
	macros.closedvarcup = op("\u2A4C");
	macros.closedvarcap = op("\u2A4D");
	macros.Sqcap = op("\u2A4E");
	macros.Sqcup = op("\u2A4F");
	macros.closedvarcupsmashprod = op("\u2A50");
	macros.wedgeodot = op("\u2A51");
	macros.veeodot = op("\u2A52");
	macros.Wedge = op("\u2A53");
	macros.Vee = op("\u2A54");
	macros.wedgeonwedge = op("\u2A55");
	macros.veeonvee = op("\u2A56");
	macros.bigslopedvee = op("\u2A57");
	macros.bigslopedwedge = op("\u2A58");
	macros.wedgemidvert = op("\u2A5A");
	macros.veemidvert = op("\u2A5B");
	macros.midbarwedge = op("\u2A5C");
	macros.midbarvee = op("\u2A5D");
	macros.doublebarwedge = op("\u2A5E");
	macros.wedgebar = op("\u2A5F");
	macros.wedgedoublebar = op("\u2A60");
	macros.varveebar = op("\u2A61");
	macros.doublebarvee = op("\u2A62");
	macros.veedoublebar = op("\u2A63");
	macros.dsub = op("\u2A64");
	macros.rsub = op("\u2A65");
	macros.eqqplus = op("\u2A71");
	macros.pluseqq = op("\u2A72");
	macros.interleave = op("\u2AF4");
	macros.nhVvert = op("\u2AF5");
	macros.threedotcolon = op("\u2AF6");
	macros.trslash = op("\u2AFB");
	macros.sslash = op("\u2AFD");
	macros.talloblong = op("\u2AFE");

	macros.octothorpe = sym("\u0023");
	macros.mathdollar = sym("\u0024");
	macros.percent = sym("\u0025");
	macros.ampersand = sym("\u0026");
	macros.period = punct("\u002E");
	macros.mathslash = sym("\u002F");
	macros.question = sym("\u003F");
	macros.atsign = sym("\u0040");
	macros.backslash = sym("\u005C");
	macros.sterling = sym("\u00A3");
	macros.yen = sym("\u00A5");
	macros.neg = sym("\u00AC");
	macros.Zbar = sym("\u01B5");
	macros.upoldKoppa = sym("\u03D8");
	macros.upoldkoppa = sym("\u03D9");
	macros.upbackepsilon = sym("\u03F6");
	macros.horizbar = sym("\u2015");
	macros.twolowline = sym("\u2017");
	macros.enleadertwodots = sym("\u2025");
	macros.unicodeellipsis = sym("\u2026");
	macros.prime = sym("\u2032");
	macros.dprime = sym("\u2033");
	macros.trprime = sym("\u2034");
	macros.backprime = sym("\u2035");
	macros.backdprime = sym("\u2036");
	macros.backtrprime = sym("\u2037");
	macros.caretinsert = sym("\u2038");
	macros.Exclam = sym("\u203C");
	macros.hyphenbullet = sym("\u2043");
	macros.Question = sym("\u2047");
	macros.qprime = sym("\u2057");
	macros.euro = sym("\u20AC");
	macros.enclosecircle = sym("\u20DD");
	macros.enclosesquare = sym("\u20DE");
	macros.enclosediamond = sym("\u20DF");
	macros.enclosetriangle = sym("\u20E4");
	macros.Eulerconst = sym("\u2107");
	macros.Planckconst = sym("\u210E");
	macros.mho = sym("\u2127");
	macros.Finv = sym("\u2132");
	macros.Bbbpi = sym("\u213C");
	macros.Game = sym("\u2141");
	macros.sansLturned = sym("\u2142");
	macros.sansLmirrored = sym("\u2143");
	macros.Yup = sym("\u2144");
	macros.mitBbbD = sym("\u2145");
	macros.mitBbbd = sym("\u2146"); 
	macros.mitBbbe = sym("\u2147");
	macros.mitBbbi = sym("\u2148");
	macros.mitBbbj = sym("\u2149");
	macros.PropertyLine = sym("\u214A");
	macros.updownarrowbar = sym("\u21A8");
	macros.linefeed = sym("\u21B4");
	macros.carriagereturn = sym("\u21B5");
	macros.barovernorthwestarrow = sym("\u21B8");
	macros.barleftarrowrightarrowbar = sym("\u21B9");
	macros.acwopencirclearrow = sym("\u21BA");
	macros.cwopencirclearrow = sym("\u21BB");
	macros.nHuparrow = sym("\u21DE");
	macros.nHdownarrow = sym("\u21DF");
	macros.leftdasharrow = sym("\u21E0");
	macros.updasharrow = sym("\u21E1");
	macros.rightdasharrow = sym("\u21E2");
	macros.downdasharrow = sym("\u21E3");
	macros.leftwhitearrow = sym("\u21E6");
	macros.upwhitearrow = sym("\u21E7");
	macros.rightwhitearrow = sym("\u21E8");
	macros.downwhitearrow = sym("\u21E9");
	macros.whitearrowupfrombar = sym("\u21EA");
	macros.forall = sym("\u2200");
	macros.complement = sym("\u2201");
	macros.exists = sym("\u2203");
	macros.nexists = sym("\u2204");
	macros.varnothing = sym("\u2205");
	macros.increment = sym("\u2206");
	macros.QED = sym("\u220E");
	macros.infty = sym("\u221E");
	macros.rightangle = sym("\u221F");
	macros.angle = sym("\u2220");
	macros.measuredangle = sym("\u2221");
	macros.sphericalangle = sym("\u2222");
	macros.therefore = sym("\u2234");
	macros.because = sym("\u2235");
	macros.sinewave = sym("\u223F");
	macros.top = sym("\u22A4");
	macros.bot = sym("\u22A5");
	macros.hermitmatrix = sym("\u22B9");
	macros.measuredrightangle = sym("\u22BE");
	macros.varlrtriangle = sym("\u22BF");
	macros.unicodecdots = sym("\u22EF");
	macros.diameter = sym("\u2300");
	macros.house = sym("\u2302");
	macros.invnot = sym("\u2310");
	macros.sqlozenge = sym("\u2311");
	macros.profline = sym("\u2312");
	macros.profsurf = sym("\u2313");
	macros.viewdata = sym("\u2317"); 
	macros.turnednot = sym("\u2319");
	macros.inttop = sym("\u2320");
	macros.intbottom = sym("\u2321");
	macros.varhexagonlrbonds = sym("\u232C");
	macros.conictaper = sym("\u2332");
	macros.topbot = sym("\u2336");
	macros.APLnotbackslash = sym("\u2340");
	macros.APLboxupcaret = sym("\u2353");
	macros.APLboxquestion = sym("\u2370");
	macros.rangledownzigzagarrow = sym("\u237C");
	macros.hexagon = sym("\u2394");
	macros.lparenuend = sym("\u239B");
	macros.lparenextender = sym("\u239C");
	macros.lparenlend = sym("\u239D");
	macros.rparenuend = sym("\u239E");
	macros.rparenextender = sym("\u239F");
	macros.rparenlend = sym("\u23A0");
	macros.lbrackuend = sym("\u23A1");
	macros.lbrackextender = sym("\u23A2");
	macros.lbracklend = sym("\u23A3");
	macros.rbrackuend = sym("\u23A4");
	macros.rbrackextender = sym("\u23A5");
	macros.rbracklend = sym("\u23A6");
	macros.lbraceuend = sym("\u23A7");
	macros.lbracemid = sym("\u23A8");
	macros.lbracelend = sym("\u23A9"); 
	macros.vbraceextender = sym("\u23AA");
	macros.rbraceuend = sym("\u23AB");
	macros.rbracemid = sym("\u23AC");
	macros.rbracelend = sym("\u23AD");
	macros.intextender = sym("\u23AE");
	macros.harrowextender = sym("\u23AF");
	macros.sumtop = sym("\u23B2");
	macros.sumbottom = sym("\u23B3");
	macros.bbrktbrk = sym("\u23B6");
	macros.sqrtbottom = sym("\u23B7");
	macros.lvboxline = sym("\u23B8");
	macros.rvboxline = sym("\u23B9");
	macros.varcarriagereturn = sym("\u23CE");
	macros.obrbrak = sym("\u23E0");
	macros.ubrbrak = sym("\u23E1");
	macros.trapezium = sym("\u23E2");
	macros.benzenr = sym("\u23E3");
	macros.strns = sym("\u23E4");
	macros.fltns = sym("\u23E5");
	macros.accurrent = sym("\u23E6");
	macros.elinters = sym("\u23E7");
	macros.blanksymbol = sym("\u2422");
	macros.mathvisiblespace = sym("\u2423");
	macros.bdtriplevdash = sym("\u2506");
	macros.blockuphalf = sym("\u2580");
	macros.blocklowhalf = sym("\u2584");
	macros.blockfull = sym("\u2588");
	macros.blocklefthalf = sym("\u258C");
	macros.blockrighthalf = sym("\u2590");
	macros.blockqtrshaded = sym("\u2591");
	macros.blockhalfshaded = sym("\u2592");
	macros.blockthreeqtrshaded = sym("\u2593");
	macros.mdlgblksquare = sym("\u25A0");
	macros.mdlgwhtsquare = sym("\u25A1");
	macros.squoval = sym("\u25A2");
	macros.blackinwhitesquare = sym("\u25A3");
	macros.squarehfill = sym("\u25A4");
	macros.squarevfill = sym("\u25A5");
	macros.squarehvfill = sym("\u25A6");
	macros.squarenwsefill = sym("\u25A7");
	macros.squareneswfill = sym("\u25A8"); 
	macros.squarecrossfill = sym("\u25A9");
	macros.smblksquare = sym("\u25AA");
	macros.smwhtsquare = sym("\u25AB");
	macros.hrectangleblack = sym("\u25AC");
	macros.hrectangle = sym("\u25AD");
	macros.vrectangleblack = sym("\u25AE");
	macros.vrectangle = sym("\u25AF");
	macros.parallelogramblack = sym("\u25B0");
	macros.parallelogram = sym("\u25B1");
	macros.bigblacktriangleup = sym("\u25B2");
	macros.blacktriangle = sym("\u25B4");
	macros.blacktriangleright = sym("\u25B6");
	macros.smallblacktriangleright = sym("\u25B8");
	macros.smalltriangleright = sym("\u25B9");
	macros.blackpointerright = sym("\u25BA");
	macros.whitepointerright = sym("\u25BB");
	macros.bigblacktriangledown = sym("\u25BC");
	macros.bigtriangledown = sym("\u25BD");
	macros.blacktriangledown = sym("\u25BE");
	macros.triangledown = sym("\u25BF");
	macros.blacktriangleleft = sym("\u25C0");
	macros.smallblacktriangleleft = sym("\u25C2");
	macros.smalltriangleleft = sym("\u25C3");
	macros.blackpointerleft = sym("\u25C4");
	macros.whitepointerleft = sym("\u25C5");
	macros.mdlgblkdiamond = sym("\u25C6");
	macros.mdlgwhtdiamond = sym("\u25C7");
	macros.blackinwhitediamond = sym("\u25C8");
	macros.fisheye = sym("\u25C9");
	macros.mdlgwhtlozenge = sym("\u25CA");
	macros.dottedcircle = sym("\u25CC");
	macros.circlevertfill = sym("\u25CD");
	macros.bullseye = sym("\u25CE");
	macros.mdlgblkcircle = sym("\u25CF");
	macros.circlelefthalfblack = sym("\u25D0");
	macros.circlerighthalfblack = sym("\u25D1");
	macros.circlebottomhalfblack = sym("\u25D2");
	macros.circletophalfblack = sym("\u25D3");
	macros.circleurquadblack = sym("\u25D4");
	macros.blackcircleulquadwhite = sym("\u25D5");
	macros.blacklefthalfcircle = sym("\u25D6");
	macros.blackrighthalfcircle = sym("\u25D7");
	macros.inversebullet = sym("\u25D8");
	macros.inversewhitecircle = sym("\u25D9");
	macros.invwhiteupperhalfcircle = sym("\u25DA");
	macros.invwhitelowerhalfcircle = sym("\u25DB");
	macros.ularc = sym("\u25DC");
	macros.urarc = sym("\u25DD");
	macros.lrarc = sym("\u25DE");
	macros.llarc = sym("\u25DF"); 
	macros.topsemicircle = sym("\u25E0");
	macros.botsemicircle = sym("\u25E1");
	macros.lrblacktriangle = sym("\u25E2");
	macros.llblacktriangle = sym("\u25E3");
	macros.ulblacktriangle = sym("\u25E4");
	macros.urblacktriangle = sym("\u25E5");
	macros.smwhtcircle = sym("\u25E6");
	macros.squareleftblack = sym("\u25E7");
	macros.squarerightblack = sym("\u25E8");
	macros.squareulblack = sym("\u25E9");
	macros.squarelrblack = sym("\u25EA");
	macros.trianglecdot = sym("\u25EC");
	macros.triangleleftblack = sym("\u25ED");
	macros.trianglerightblack = sym("\u25EE");
	macros.lgwhtcircle = sym("\u25EF");
	macros.squareulquad = sym("\u25F0");
	macros.squarellquad = sym("\u25F1");
	macros.squarelrquad = sym("\u25F2");
	macros.squareurquad = sym("\u25F3");
	macros.circleulquad = sym("\u25F4");
	macros.circlellquad = sym("\u25F5");
	macros.circlelrquad = sym("\u25F6");
	macros.circleurquad = sym("\u25F7");
	macros.ultriangle = sym("\u25F8");
	macros.urtriangle = sym("\u25F9");
	macros.lltriangle = sym("\u25FA");
	macros.mdwhtsquare = sym("\u25FB");
	macros.mdblksquare = sym("\u25FC");
	macros.mdsmwhtsquare = sym("\u25FD");
	macros.mdsmblksquare = sym("\u25FE");
	macros.lrtriangle = sym("\u25FF");
	macros.bigstar = sym("\u2605");
	macros.bigwhitestar = sym("\u2606");
	macros.astrosun = sym("\u2609");
	macros.danger = sym("\u2621");
	macros.blacksmiley = sym("\u263B");
	macros.sun = sym("\u263C");
	macros.rightmoon = sym("\u263D");
	macros.leftmoon = sym("\u263E");
	macros.female = sym("\u2640");
	macros.male = sym("\u2642");
	macros.spadesuit = sym("\u2660");
	macros.heartsuit = sym("\u2661");
	macros.diamondsuit = sym("\u2662");
	macros.clubsuit = sym("\u2663");
	macros.varspadesuit = sym("\u2664");
	macros.varheartsuit = sym("\u2665");
	macros.vardiamondsuit = sym("\u2666");
	macros.varclubsuit = sym("\u2667");
	macros.quarternote = sym("\u2669"); 
	macros.eighthnote = sym("\u266A");
	macros.twonotes = sym("\u266B");
	macros.flat = sym("\u266D");
	macros.natural = sym("\u266E");
	macros.sharp = sym("\u266F");
	macros.acidfree = sym("\u267E");
	macros.dicei = sym("\u2680");
	macros.diceii = sym("\u2681");
	macros.diceiii = sym("\u2682");
	macros.diceiv = sym("\u2683");
	macros.dicev = sym("\u2684");
	macros.dicevi = sym("\u2685");
	macros.circledrightdot = sym("\u2686");
	macros.circledtwodots = sym("\u2687");
	macros.blackcircledrightdot = sym("\u2688");
	macros.blackcircledtwodots = sym("\u2689");
	macros.Hermaphrodite = sym("\u26A5");
	macros.mdwhtcircle = sym("\u26AA");
	macros.mdblkcircle = sym("\u26AB");
	macros.mdsmwhtcircle = sym("\u26AC");
	macros.neuter = sym("\u26B2");
	macros.checkmark = sym("\u2713");
	macros.maltese = sym("\u2720");
	macros.circledstar = sym("\u272A");
	macros.varstar = sym("\u2736");
	macros.dingasterisk = sym("\u273D");
	macros.draftingarrow = sym("\u279B");
	macros.threedangle = sym("\u27C0");
	macros.whiteinwhitetriangle = sym("\u27C1");
	macros.subsetcirc = sym("\u27C3");
	macros.supsetcirc = sym("\u27C4");
	macros.diamondcdot = sym("\u27D0");
	macros.rdiagovfdiag = sym("\u292B");
	macros.fdiagovrdiag = sym("\u292C");
	macros.seovnearrow = sym("\u292D");
	macros.neovsearrow = sym("\u292E");
	macros.fdiagovnearrow = sym("\u292F");
	macros.rdiagovsearrow = sym("\u2930");
	macros.neovnwarrow = sym("\u2931");
	macros.nwovnearrow = sym("\u2932");
	macros.uprightcurvearrow = sym("\u2934");
	macros.downrightcurvedarrow = sym("\u2935");
	macros.mdsmblkcircle = sym("\u2981");
	macros.fourvdots = sym("\u2999");
	macros.vzigzag = sym("\u299A");
	macros.measuredangleleft = sym("\u299B");
	macros.rightanglesqr = sym("\u299C");
	macros.rightanglemdot = sym("\u299D");
	macros.angles = sym("\u299E");
	macros.angdnr = sym("\u299F"); 
	macros.gtlpar = sym("\u29A0");
	macros.sphericalangleup = sym("\u29A1");
	macros.turnangle = sym("\u29A2");
	macros.revangle = sym("\u29A3");
	macros.angleubar = sym("\u29A4");
	macros.revangleubar = sym("\u29A5");
	macros.wideangledown = sym("\u29A6");
	macros.wideangleup = sym("\u29A7");
	macros.measanglerutone = sym("\u29A8");
	macros.measanglelutonw = sym("\u29A9");
	macros.measanglerdtose = sym("\u29AA");
	macros.measangleldtosw = sym("\u29AB");
	macros.measangleurtone = sym("\u29AC");
	macros.measangleultonw = sym("\u29AD");
	macros.measangledrtose = sym("\u29AE");
	macros.measangledltosw = sym("\u29AF");
	macros.revemptyset = sym("\u29B0");
	macros.emptysetobar = sym("\u29B1");
	macros.emptysetocirc = sym("\u29B2");
	macros.emptysetoarr = sym("\u29B3");
	macros.emptysetoarrl = sym("\u29B4");
	macros.obot = sym("\u29BA");
	macros.olcross = sym("\u29BB");
	macros.odotslashdot = sym("\u29BC");
	macros.uparrowoncircle = sym("\u29BD");
	macros.circledwhitebullet = sym("\u29BE");
	macros.circledbullet = sym("\u29BF");
	macros.cirscir = sym("\u29C2");
	macros.cirE = sym("\u29C3");
	macros.boxonbox = sym("\u29C9");
	macros.triangleodot = sym("\u29CA");
	macros.triangleubar = sym("\u29CB");
	macros.triangles = sym("\u29CC");
	macros.iinfin = sym("\u29DC");
	macros.tieinfty = sym("\u29DD");
	macros.nvinfty = sym("\u29DE");
	macros.laplac = sym("\u29E0");
	macros.thermod = sym("\u29E7");
	macros.downtriangleleftblack = sym("\u29E8");
	macros.downtrianglerightblack = sym("\u29E9");
	macros.blackdiamonddownarrow = sym("\u29EA");
	macros.circledownarrow = sym("\u29EC");
	macros.blackcircledownarrow = sym("\u29ED");
	macros.errbarsquare = sym("\u29EE");
	macros.errbarblacksquare = sym("\u29EF"); 
	macros.errbardiamond = sym("\u29F0");
	macros.errbarblackdiamond = sym("\u29F1");
	macros.errbarcircle = sym("\u29F2");
	macros.errbarblackcircle = sym("\u29F3");
	macros.perps = sym("\u2AE1");
	macros.topcir = sym("\u2AF1");
	macros.squaretopblack = sym("\u2B12");
	macros.squarebotblack = sym("\u2B13");
	macros.squareurblack = sym("\u2B14");
	macros.squarellblack = sym("\u2B15");
	macros.diamondleftblack = sym("\u2B16");
	macros.diamondrightblack = sym("\u2B17");
	macros.diamondtopblack = sym("\u2B18");
	macros.diamondbotblack = sym("\u2B19");
	macros.dottedsquare = sym("\u2B1A");
	macros.lgblksquare = sym("\u2B1B");
	macros.lgwhtsquare = sym("\u2B1C");
	macros.vysmblksquare = sym("\u2B1D");
	macros.vysmwhtsquare = sym("\u2B1E");
	macros.pentagonblack = sym("\u2B1F");
	macros.pentagon = sym("\u2B20");
	macros.varhexagon = sym("\u2B21");
	macros.varhexagonblack = sym("\u2B22");
	macros.hexagonblack = sym("\u2B23");
	macros.lgblkcircle = sym("\u2B24");
	macros.mdblkdiamond = sym("\u2B25");
	macros.mdwhtdiamond = sym("\u2B26");
	macros.mdblklozenge = sym("\u2B27");
	macros.mdwhtlozenge = sym("\u2B28");
	macros.smblkdiamond = sym("\u2B29");
	macros.smblklozenge = sym("\u2B2A");
	macros.smwhtlozenge = sym("\u2B2B");
	macros.blkhorzoval = sym("\u2B2C");
	macros.whthorzoval = sym("\u2B2D");
	macros.blkvertoval = sym("\u2B2E");
	macros.whtvertoval = sym("\u2B2F");
	macros.medwhitestar = sym("\u2B50");
	macros.medblackstar = sym("\u2B51");
	macros.smwhitestar = sym("\u2B52");
	macros.rightpentagonblack = sym("\u2B53");
	macros.rightpentagon = sym("\u2B54");
	macros.postalmark = sym("\u3012");
	macros.hzigzag = sym("\u3030");
	macros.mbfzero = sym("&#x1D7CE;");
	macros.mbfone = sym("&#x1D7CF;");
	macros.mbftwo = sym("&#x1D7D0;");
	macros.mbfthree = sym("&#x1D7D1;");
	macros.mbffour = sym("&#x1D7D2;");
	macros.mbffive = sym("&#x1D7D3;");
	macros.mbfsix = sym("&#x1D7D4;"); 
	macros.mbfseven = sym("&#x1D7D5;");
	macros.mbfeight = sym("&#x1D7D6;");
	macros.mbfnine = sym("&#x1D7D7;");
	macros.Bbbzero = sym("&#x1D7D8;");
	macros.Bbbone = sym("&#x1D7D9;");
	macros.Bbbtwo = sym("&#x1D7DA;");
	macros.Bbbthree = sym("&#x1D7DB;");
	macros.Bbbfour = sym("&#x1D7DC;");
	macros.Bbbfive = sym("&#x1D7DD;");
	macros.Bbbsix = sym("&#x1D7DE;");
	macros.Bbbseven = sym("&#x1D7DF;");
	macros.Bbbeight = sym("&#x1D7E0;");
	macros.Bbbnine = sym("&#x1D7E1;");
	macros.msanszero = sym("&#x1D7E2;");
	macros.msansone = sym("&#x1D7E3;");
	macros.msanstwo = sym("&#x1D7E4;");
	macros.msansthree = sym("&#x1D7E5;");
	macros.msansfour = sym("&#x1D7E6;");
	macros.msansfive = sym("&#x1D7E7;");
	macros.msanssix = sym("&#x1D7E8;");
	macros.msansseven = sym("&#x1D7E9;");
	macros.msanseight = sym("&#x1D7EA;");
	macros.msansnine = sym("&#x1D7EB;");
	macros.mbfsanszero = sym("&#x1D7EC;");
	macros.mbfsansone = sym("&#x1D7ED;");
	macros.mbfsanstwo = sym("&#x1D7EE;");
	macros.mbfsansthree = sym("&#x1D7EF;");
	macros.mbfsansfour = sym("&#x1D7F0;");
	macros.mbfsansfive = sym("&#x1D7F1;");
	macros.mbfsanssix = sym("&#x1D7F2;");
	macros.mbfsansseven = sym("&#x1D7F3;");
	macros.mbfsanseight = sym("&#x1D7F4;");
	macros.mbfsansnine = sym("&#x1D7F5;");
	macros.mttzero = sym("&#x1D7F6;");
	macros.mttone = sym("&#x1D7F7;");
	macros.mtttwo = sym("&#x1D7F8;");
	macros.mttthree = sym("&#x1D7F9;");
	macros.mttfour = sym("&#x1D7FA;");
	macros.mttfive = sym("&#x1D7FB;");
	macros.mttsix = sym("&#x1D7FC;");
	macros.mttseven = sym("&#x1D7FD;");
	macros.mtteight = sym("&#x1D7FE;");
	macros.mttnine = sym("&#x1D7FF;");

	macros.less = op("\u003C");
	macros.equal = op("\u003D");
	macros.greater = op("\u003E");
	macros.closure = op("\u2050");
	macros.leftarrow = op("\u2190");
	macros.uparrow = op("\u2191");
	macros.rightarrow = op("\u2192");
	macros.downarrow = op("\u2193");
	macros.leftrightarrow = op("\u2194");
	macros.updownarrow = op("\u2195");
	macros.nwarrow = op("\u2196");
	macros.nearrow = op("\u2197");
	macros.searrow = op("\u2198");
	macros.swarrow = op("\u2199");
	macros.nleftarrow = op("\u219A");
	macros.nrightarrow = op("\u219B");
	macros.leftwavearrow = op("\u219C");
	macros.rightwavearrow = op("\u219D");
	macros.twoheadleftarrow = op("\u219E");
	macros.twoheaduparrow = op("\u219F");
	macros.twoheadrightarrow = op("\u21A0");
	macros.twoheaddownarrow = op("\u21A1");
	macros.leftarrowtail = op("\u21A2");
	macros.rightarrowtail = op("\u21A3");
	macros.mapsfrom = op("\u21A4");
	macros.mapsup = op("\u21A5");
	macros.mapsto = op("\u21A6");
	macros.mapsdown = op("\u21A7");
	macros.hookleftarrow = op("\u21A9");
	macros.hookrightarrow = op("\u21AA");
	macros.looparrowleft = op("\u21AB");
	macros.looparrowright = op("\u21AC");
	macros.leftrightsquigarrow = op("\u21AD");
	macros.nleftrightarrow = op("\u21AE");
	macros.downzigzagarrow = op("\u21AF");
	macros.Lsh = op("\u21B0");
	macros.Rsh = op("\u21B1");
	macros.Ldsh = op("\u21B2");
	macros.Rdsh = op("\u21B3");
	macros.curvearrowleft = op("\u21B6");
	macros.curvearrowright = op("\u21B7");
	macros.leftharpoonup = op("\u21BC");
	macros.leftharpoondown = op("\u21BD");
	macros.upharpoonright = op("\u21BE");
	macros.upharpoonleft = op("\u21BF");
	macros.rightharpoonup = op("\u21C0");
	macros.rightharpoondown = op("\u21C1"); 
	macros.downharpoonright = op("\u21C2");
	macros.downharpoonleft = op("\u21C3");
	macros.rightleftarrows = op("\u21C4");
	macros.updownarrows = op("\u21C5");
	macros.leftrightarrows = op("\u21C6");
	macros.leftleftarrows = op("\u21C7");
	macros.upuparrows = op("\u21C8");
	macros.rightrightarrows = op("\u21C9");
	macros.downdownarrows = op("\u21CA");
	macros.leftrightharpoons = op("\u21CB");
	macros.rightleftharpoons = op("\u21CC");
	macros.nLeftarrow = op("\u21CD");
	macros.nLeftrightarrow = op("\u21CE");
	macros.nRightarrow = op("\u21CF");
	macros.Leftarrow = op("\u21D0");
	macros.Uparrow = op("\u21D1");
	macros.Rightarrow = op("\u21D2");
	macros.Downarrow = op("\u21D3");
	macros.Leftrightarrow = op("\u21D4");
	macros.Updownarrow = op("\u21D5");
	macros.Nwarrow = op("\u21D6");
	macros.Nearrow = op("\u21D7");
	macros.Searrow = op("\u21D8");
	macros.Swarrow = op("\u21D9");
	macros.Lleftarrow = op("\u21DA");
	macros.Rrightarrow = op("\u21DB");
	macros.leftsquigarrow = op("\u21DC");
	macros.rightsquigarrow = op("\u21DD");
	macros.barleftarrow = op("\u21E4");
	macros.rightarrowbar = op("\u21E5");
	macros.circleonrightarrow = op("\u21F4");
	macros.downuparrows = op("\u21F5");
	macros.rightthreearrows = op("\u21F6");
	macros.nvleftarrow = op("\u21F7");
	macros.nvrightarrow = op("\u21F8");
	macros.nvleftrightarrow = op("\u21F9");
	macros.nVleftarrow = op("\u21FA");
	macros.nVrightarrow = op("\u21FB");
	macros.nVleftrightarrow = op("\u21FC");
	macros.leftarrowtriangle = op("\u21FD");
	macros.rightarrowtriangle = op("\u21FE");
	macros.leftrightarrowtriangle = op("\u21FF");
	macros.in = op("\u2208");
	macros.notin = op("\u2209");
	macros.smallin = op("\u220A");
	macros.ni = op("\u220B");
	macros.nni = op("\u220C");
	macros.smallni = op("\u220D");
	macros.propto = op("\u221D");
	macros.mid = op("\u2223"); 
	macros.nmid = op("\u2224");
	macros.parallel = op("\u2225");
	macros.nparallel = op("\u2226");
	macros.mathratio = op("\u2236");
	macros.Colon = op("\u2237");
	macros.dashcolon = op("\u2239");
	macros.dotsminusdots = op("\u223A");
	macros.kernelcontraction = op("\u223B");
	macros.sim = op("\u223C");
	macros.backsim = op("\u223D");
	macros.nsim = op("\u2241");
	macros.eqsim = op("\u2242");
	macros.simeq = op("\u2243");
	macros.nsime = op("\u2244");
	macros.cong = op("\u2245");
	macros.simneqq = op("\u2246");
	macros.ncong = op("\u2247");
	macros.approx = op("\u2248");
	macros.napprox = op("\u2249");
	macros.approxeq = op("\u224A");
	macros.approxident = op("\u224B");
	macros.backcong = op("\u224C");
	macros.asymp = op("\u224D");
	macros.Bumpeq = op("\u224E");
	macros.bumpeq = op("\u224F");
	macros.doteq = op("\u2250");
	macros.Doteq = op("\u2251");
	macros.fallingdotseq = op("\u2252");
	macros.risingdotseq = op("\u2253");
	macros.coloneq = op("\u2254");
	macros.eqcolon = op("\u2255");
	macros.eqcirc = op("\u2256");
	macros.circeq = op("\u2257");
	macros.arceq = op("\u2258");
	macros.wedgeq = op("\u2259");
	macros.veeeq = op("\u225A");
	macros.stareq = op("\u225B");
	macros.triangleq = op("\u225C");
	macros.eqdef = op("\u225D");
	macros.measeq = op("\u225E");
	macros.questeq = op("\u225F");
	macros.ne = op("\u2260");
	macros.equiv = op("\u2261");
	macros.nequiv = op("\u2262");
	macros.Equiv = op("\u2263");
	macros.leq = op("\u2264");
	macros.geq = op("\u2265");
	macros.leqq = op("\u2266");
	macros.geqq = op("\u2267");
	macros.lneqq = op("\u2268"); 
	macros.gneqq = op("\u2269");
	macros.ll = op("\u226A");
	macros.gg = op("\u226B");
	macros.between = op("\u226C");
	macros.nasymp = op("\u226D");
	macros.nless = op("\u226E");
	macros.ngtr = op("\u226F");
	macros.nleq = op("\u2270");
	macros.ngeq = op("\u2271");
	macros.lesssim = op("\u2272");
	macros.gtrsim = op("\u2273");
	macros.nlesssim = op("\u2274");
	macros.ngtrsim = op("\u2275");
	macros.lessgtr = op("\u2276");
	macros.gtrless = op("\u2277");
	macros.nlessgtr = op("\u2278");
	macros.ngtrless = op("\u2279");
	macros.prec = op("\u227A");
	macros.succ = op("\u227B");
	macros.preccurlyeq = op("\u227C");
	macros.succcurlyeq = op("\u227D");
	macros.precsim = op("\u227E");
	macros.succsim = op("\u227F");
	macros.nprec = op("\u2280");
	macros.nsucc = op("\u2281");
	macros.subset = op("\u2282");
	macros.supset = op("\u2283");
	macros.nsubset = op("\u2284");
	macros.nsupset = op("\u2285");
	macros.subseteq = op("\u2286");
	macros.supseteq = op("\u2287");
	macros.nsubseteq = op("\u2288");
	macros.nsupseteq = op("\u2289");
	macros.subsetneq = op("\u228A");
	macros.supsetneq = op("\u228B");
	macros.sqsubset = op("\u228F");
	macros.sqsupset = op("\u2290");
	macros.sqsubseteq = op("\u2291");
	macros.sqsupseteq = op("\u2292");
	macros.vdash = op("\u22A2");
	macros.dashv = op("\u22A3");
	macros.assert = op("\u22A6");
	macros.models = op("\u22A7");
	macros.vDash = op("\u22A8");
	macros.Vdash = op("\u22A9");
	macros.Vvdash = op("\u22AA");
	macros.VDash = op("\u22AB");
	macros.nvdash = op("\u22AC");
	macros.nvDash = op("\u22AD");
	macros.nVdash = op("\u22AE"); 
	macros.nVDash = op("\u22AF");
	macros.prurel = op("\u22B0");
	macros.scurel = op("\u22B1");
	macros.vartriangleleft = op("\u22B2");
	macros.vartriangleright = op("\u22B3");
	macros.trianglelefteq = op("\u22B4");
	macros.trianglerighteq = op("\u22B5");
	macros.origof = op("\u22B6");
	macros.imageof = op("\u22B7");
	macros.multimap = op("\u22B8");
	macros.bowtie = op("\u22C8");
	macros.backsimeq = op("\u22CD");
	macros.Subset = op("\u22D0");
	macros.Supset = op("\u22D1");
	macros.pitchfork = op("\u22D4");
	macros.equalparallel = op("\u22D5");
	macros.lessdot = op("\u22D6");
	macros.gtrdot = op("\u22D7");
	macros.lll = op("\u22D8");
	macros.ggg = op("\u22D9");
	macros.lesseqgtr = op("\u22DA");
	macros.gtreqless = op("\u22DB");
	macros.eqless = op("\u22DC");
	macros.eqgtr = op("\u22DD");
	macros.curlyeqprec = op("\u22DE");
	macros.curlyeqsucc = op("\u22DF");
	macros.npreccurlyeq = op("\u22E0");
	macros.nsucccurlyeq = op("\u22E1");
	macros.nsqsubseteq = op("\u22E2");
	macros.nsqsupseteq = op("\u22E3");
	macros.sqsubsetneq = op("\u22E4");
	macros.sqsupsetneq = op("\u22E5");
	macros.lnsim = op("\u22E6");
	macros.gnsim = op("\u22E7");
	macros.precnsim = op("\u22E8");
	macros.succnsim = op("\u22E9");
	macros.nvartriangleleft = op("\u22EA");
	macros.nvartriangleright = op("\u22EB");
	macros.ntrianglelefteq = op("\u22EC");
	macros.ntrianglerighteq = op("\u22ED");
	macros.vdots = op("\u22EE");
	macros.adots = op("\u22F0");
	macros.ddots = op("\u22F1");
	macros.disin = op("\u22F2");
	macros.varisins = op("\u22F3");
	macros.isins = op("\u22F4");
	macros.isindot = op("\u22F5");
	macros.varisinobar = op("\u22F6");
	macros.isinobar = op("\u22F7");
	macros.isinvb = op("\u22F8"); 
	macros.isinE = op("\u22F9");
	macros.nisd = op("\u22FA");
	macros.varnis = op("\u22FB");
	macros.nis = op("\u22FC");
	macros.varniobar = op("\u22FD");
	macros.niobar = op("\u22FE");
	macros.bagmember = op("\u22FF");
	macros.frown = op("\u2322");
	macros.smile = op("\u2323");
	macros.APLnotslash = op("\u233F");
	macros.vartriangle = op("\u25B5");
	macros.perp = op("\u27C2");
	macros.bsolhsub = op("\u27C8");
	macros.suphsol = op("\u27C9");
	macros.upin = op("\u27D2");
	macros.pullback = op("\u27D3");
	macros.pushout = op("\u27D4");
	macros.DashVDash = op("\u27DA");
	macros.dashVdash = op("\u27DB");
	macros.multimapinv = op("\u27DC");
	macros.vlongdash = op("\u27DD");
	macros.longdashv = op("\u27DE");
	macros.cirbot = op("\u27DF");
	macros.UUparrow = op("\u27F0");
	macros.DDownarrow = op("\u27F1");
	macros.acwgapcirclearrow = op("\u27F2");
	macros.cwgapcirclearrow = op("\u27F3");
	macros.rightarrowonoplus = op("\u27F4");
	macros.longleftarrow = op("\u27F5");
	macros.longrightarrow = op("\u27F6");
	macros.longleftrightarrow = op("\u27F7");
	macros.Longleftarrow = op("\u27F8");
	macros.Longrightarrow = op("\u27F9");
	macros.Longleftrightarrow = op("\u27FA");
	macros.longmapsfrom = op("\u27FB");
	macros.longmapsto = op("\u27FC");
	macros.Longmapsfrom = op("\u27FD");
	macros.Longmapsto = op("\u27FE");
	macros.longrightsquigarrow = op("\u27FF");
	macros.nvtwoheadrightarrow = op("\u2900");
	macros.nVtwoheadrightarrow = op("\u2901");
	macros.nvLeftarrow = op("\u2902");
	macros.nvRightarrow = op("\u2903");
	macros.nvLeftrightarrow = op("\u2904");
	macros.twoheadmapsto = op("\u2905");
	macros.Mapsfrom = op("\u2906");
	macros.Mapsto = op("\u2907");
	macros.downarrowbarred = op("\u2908");
	macros.uparrowbarred = op("\u2909"); 
	macros.Uuparrow = op("\u290A");
	macros.Ddownarrow = op("\u290B");
	macros.leftbkarrow = op("\u290C");
	macros.rightbkarrow = op("\u290D");
	macros.leftdbkarrow = op("\u290E");
	macros.dbkarow = op("\u290F");
	macros.drbkarow = op("\u2910");
	macros.rightdotarrow = op("\u2911");
	macros.baruparrow = op("\u2912");
	macros.downarrowbar = op("\u2913");
	macros.nvrightarrowtail = op("\u2914");
	macros.nVrightarrowtail = op("\u2915");
	macros.twoheadrightarrowtail = op("\u2916");
	macros.nvtwoheadrightarrowtail = op("\u2917");
	macros.nVtwoheadrightarrowtail = op("\u2918");
	macros.lefttail = op("\u2919");
	macros.righttail = op("\u291A");
	macros.leftdbltail = op("\u291B");
	macros.rightdbltail = op("\u291C");
	macros.diamondleftarrow = op("\u291D");
	macros.rightarrowdiamond = op("\u291E");
	macros.diamondleftarrowbar = op("\u291F");
	macros.barrightarrowdiamond = op("\u2920");
	macros.nwsearrow = op("\u2921");
	macros.neswarrow = op("\u2922");
	macros.hknwarrow = op("\u2923");
	macros.hknearrow = op("\u2924");
	macros.hksearow = op("\u2925");
	macros.hkswarow = op("\u2926");
	macros.tona = op("\u2927");
	macros.toea = op("\u2928");
	macros.tosa = op("\u2929");
	macros.towa = op("\u292A");
	macros.rightcurvedarrow = op("\u2933");
	macros.leftdowncurvedarrow = op("\u2936");
	macros.rightdowncurvedarrow = op("\u2937");
	macros.cwrightarcarrow = op("\u2938");
	macros.acwleftarcarrow = op("\u2939");
	macros.acwoverarcarrow = op("\u293A");
	macros.acwunderarcarrow = op("\u293B");
	macros.curvearrowrightminus = op("\u293C");
	macros.curvearrowleftplus = op("\u293D");
	macros.cwundercurvearrow = op("\u293E");
	macros.ccwundercurvearrow = op("\u293F");
	macros.acwcirclearrow = op("\u2940");
	macros.cwcirclearrow = op("\u2941");
	macros.rightarrowshortleftarrow = op("\u2942");
	macros.leftarrowshortrightarrow = op("\u2943");
	macros.shortrightarrowleftarrow = op("\u2944"); 
	macros.rightarrowplus = op("\u2945");
	macros.leftarrowplus = op("\u2946");
	macros.rightarrowx = op("\u2947");
	macros.leftrightarrowcircle = op("\u2948");
	macros.twoheaduparrowcircle = op("\u2949");
	macros.leftrightharpoonupdown = op("\u294A");
	macros.leftrightharpoondownup = op("\u294B");
	macros.updownharpoonrightleft = op("\u294C");
	macros.updownharpoonleftright = op("\u294D");
	macros.leftrightharpoonupup = op("\u294E");
	macros.updownharpoonrightright = op("\u294F");
	macros.leftrightharpoondowndown = op("\u2950");
	macros.updownharpoonleftleft = op("\u2951");
	macros.barleftharpoonup = op("\u2952");
	macros.rightharpoonupbar = op("\u2953");
	macros.barupharpoonright = op("\u2954");
	macros.downharpoonrightbar = op("\u2955");
	macros.barleftharpoondown = op("\u2956");
	macros.rightharpoondownbar = op("\u2957");
	macros.barupharpoonleft = op("\u2958");
	macros.downharpoonleftbar = op("\u2959");
	macros.leftharpoonupbar = op("\u295A");
	macros.barrightharpoonup = op("\u295B");
	macros.upharpoonrightbar = op("\u295C");
	macros.bardownharpoonright = op("\u295D");
	macros.leftharpoondownbar = op("\u295E");
	macros.barrightharpoondown = op("\u295F");
	macros.upharpoonleftbar = op("\u2960");
	macros.bardownharpoonleft = op("\u2961");
	macros.leftharpoonsupdown = op("\u2962");
	macros.upharpoonsleftright = op("\u2963");
	macros.rightharpoonsupdown = op("\u2964");
	macros.downharpoonsleftright = op("\u2965");
	macros.leftrightharpoonsup = op("\u2966");
	macros.leftrightharpoonsdown = op("\u2967");
	macros.rightleftharpoonsup = op("\u2968");
	macros.rightleftharpoonsdown = op("\u2969");
	macros.leftharpoonupdash = op("\u296A");
	macros.dashleftharpoondown = op("\u296B");
	macros.rightharpoonupdash = op("\u296C");
	macros.dashrightharpoondown = op("\u296D");
	macros.updownharpoonsleftright = op("\u296E");
	macros.downupharpoonsleftright = op("\u296F");
	macros.rightimply = op("\u2970");
	macros.equalrightarrow = op("\u2971"); 
	macros.similarrightarrow = op("\u2972");
	macros.leftarrowsimilar = op("\u2973");
	macros.rightarrowsimilar = op("\u2974");
	macros.rightarrowapprox = op("\u2975");
	macros.ltlarr = op("\u2976");
	macros.leftarrowless = op("\u2977");
	macros.gtrarr = op("\u2978");
	macros.subrarr = op("\u2979");
	macros.leftarrowsubset = op("\u297A");
	macros.suplarr = op("\u297B");
	macros.leftfishtail = op("\u297C");
	macros.rightfishtail = op("\u297D");
	macros.upfishtail = op("\u297E");
	macros.downfishtail = op("\u297F");
	macros.rtriltri = op("\u29CE");
	macros.ltrivb = op("\u29CF");
	macros.vbrtri = op("\u29D0");
	macros.lfbowtie = op("\u29D1");
	macros.rfbowtie = op("\u29D2");
	macros.fbowtie = op("\u29D3");
	macros.lftimes = op("\u29D4");
	macros.rftimes = op("\u29D5");
	macros.dualmap = op("\u29DF");
	macros.lrtriangleeq = op("\u29E1");
	macros.eparsl = op("\u29E3");
	macros.smeparsl = op("\u29E4");
	macros.eqvparsl = op("\u29E5");
	macros.gleichstark = op("\u29E6");
	macros.ruledelayed = op("\u29F4");
	macros.veeonwedge = op("\u2A59");
	macros.eqdot = op("\u2A66");
	macros.dotequiv = op("\u2A67");
	macros.equivVert = op("\u2A68");
	macros.equivVvert = op("\u2A69");
	macros.dotsim = op("\u2A6A");
	macros.simrdots = op("\u2A6B");
	macros.simminussim = op("\u2A6C");
	macros.congdot = op("\u2A6D");
	macros.asteq = op("\u2A6E");
	macros.hatapprox = op("\u2A6F");
	macros.approxeqq = op("\u2A70");
	macros.eqqsim = op("\u2A73");
	macros.Coloneq = op("\u2A74");
	macros.eqeq = op("\u2A75");
	macros.eqeqeq = op("\u2A76");
	macros.ddotseq = op("\u2A77");
	macros.equivDD = op("\u2A78");
	macros.ltcir = op("\u2A79");
	macros.gtcir = op("\u2A7A");
	macros.ltquest = op("\u2A7B"); 
	macros.gtquest = op("\u2A7C");
	macros.leqslant = op("\u2A7D");
	macros.geqslant = op("\u2A7E");
	macros.lesdot = op("\u2A7F");
	macros.gesdot = op("\u2A80");
	macros.lesdoto = op("\u2A81");
	macros.gesdoto = op("\u2A82");
	macros.lesdotor = op("\u2A83");
	macros.gesdotol = op("\u2A84");
	macros.lessapprox = op("\u2A85");
	macros.gtrapprox = op("\u2A86");
	macros.lneq = op("\u2A87");
	macros.gneq = op("\u2A88");
	macros.lnapprox = op("\u2A89");
	macros.gnapprox = op("\u2A8A");
	macros.lesseqqgtr = op("\u2A8B");
	macros.gtreqqless = op("\u2A8C");
	macros.lsime = op("\u2A8D");
	macros.gsime = op("\u2A8E");
	macros.lsimg = op("\u2A8F");
	macros.gsiml = op("\u2A90");
	macros.lgE = op("\u2A91");
	macros.glE = op("\u2A92");
	macros.lesges = op("\u2A93");
	macros.gesles = op("\u2A94");
	macros.eqslantless = op("\u2A95");
	macros.eqslantgtr = op("\u2A96");
	macros.elsdot = op("\u2A97");
	macros.egsdot = op("\u2A98");
	macros.eqqless = op("\u2A99");
	macros.eqqgtr = op("\u2A9A");
	macros.eqqslantless = op("\u2A9B");
	macros.eqqslantgtr = op("\u2A9C");
	macros.simless = op("\u2A9D");
	macros.simgtr = op("\u2A9E");
	macros.simlE = op("\u2A9F");
	macros.simgE = op("\u2AA0");
	macros.Lt = op("\u2AA1");
	macros.Gt = op("\u2AA2");
	macros.partialmeetcontraction = op("\u2AA3");
	macros.glj = op("\u2AA4");
	macros.gla = op("\u2AA5");
	macros.ltcc = op("\u2AA6");
	macros.gtcc = op("\u2AA7");
	macros.lescc = op("\u2AA8");
	macros.gescc = op("\u2AA9");
	macros.smt = op("\u2AAA");
	macros.lat = op("\u2AAB"); 
	macros.smte = op("\u2AAC");
	macros.late = op("\u2AAD");
	macros.bumpeqq = op("\u2AAE");
	macros.preceq = op("\u2AAF");
	macros.succeq = op("\u2AB0");
	macros.precneq = op("\u2AB1");
	macros.succneq = op("\u2AB2");
	macros.preceqq = op("\u2AB3");
	macros.succeqq = op("\u2AB4");
	macros.precneqq = op("\u2AB5");
	macros.succneqq = op("\u2AB6");
	macros.precapprox = op("\u2AB7");
	macros.succapprox = op("\u2AB8");
	macros.precnapprox = op("\u2AB9");
	macros.succnapprox = op("\u2ABA");
	macros.Prec = op("\u2ABB");
	macros.Succ = op("\u2ABC");
	macros.subsetdot = op("\u2ABD");
	macros.supsetdot = op("\u2ABE");
	macros.subsetplus = op("\u2ABF");
	macros.supsetplus = op("\u2AC0");
	macros.submult = op("\u2AC1");
	macros.supmult = op("\u2AC2");
	macros.subedot = op("\u2AC3");
	macros.supedot = op("\u2AC4");
	macros.subseteqq = op("\u2AC5");
	macros.supseteqq = op("\u2AC6");
	macros.subsim = op("\u2AC7");
	macros.supsim = op("\u2AC8");
	macros.subsetapprox = op("\u2AC9");
	macros.supsetapprox = op("\u2ACA");
	macros.subsetneqq = op("\u2ACB");
	macros.supsetneqq = op("\u2ACC");
	macros.lsqhook = op("\u2ACD");
	macros.rsqhook = op("\u2ACE");
	macros.csub = op("\u2ACF");
	macros.csup = op("\u2AD0");
	macros.csube = op("\u2AD1");
	macros.csupe = op("\u2AD2");
	macros.subsup = op("\u2AD3");
	macros.supsub = op("\u2AD4");
	macros.subsub = op("\u2AD5");
	macros.supsup = op("\u2AD6");
	macros.suphsub = op("\u2AD7");
	macros.supdsub = op("\u2AD8");
	macros.forkv = op("\u2AD9");
	macros.topfork = op("\u2ADA");
	macros.mlcp = op("\u2ADB");
	macros.forks = op("\u2ADC");
	macros.forksnot = op("\u2ADD"); 
	macros.shortlefttack = op("\u2ADE");
	macros.shortdowntack = op("\u2ADF");
	macros.shortuptack = op("\u2AE0");
	macros.vDdash = op("\u2AE2");
	macros.dashV = op("\u2AE3");
	macros.Dashv = op("\u2AE4");
	macros.DashV = op("\u2AE5");
	macros.varVdash = op("\u2AE6");
	macros.Barv = op("\u2AE7");
	macros.vBar = op("\u2AE8");
	macros.vBarv = op("\u2AE9");
	macros.barV = op("\u2AEA");
	macros.Vbar = op("\u2AEB");
	macros.Not = op("\u2AEC");
	macros.bNot = op("\u2AED");
	macros.revnmid = op("\u2AEE");
	macros.cirmid = op("\u2AEF");
	macros.midcir = op("\u2AF0");
	macros.nhpar = op("\u2AF2");
	macros.parsim = op("\u2AF3");
	macros.lllnest = op("\u2AF7");
	macros.gggnest = op("\u2AF8");
	macros.leqqslant = op("\u2AF9");
	macros.geqqslant = op("\u2AFA");
	macros.circleonleftarrow = op("\u2B30");
	macros.leftthreearrows = op("\u2B31");
	macros.leftarrowonoplus = op("\u2B32");
	macros.longleftsquigarrow = op("\u2B33");
	macros.nvtwoheadleftarrow = op("\u2B34");
	macros.nVtwoheadleftarrow = op("\u2B35");
	macros.twoheadmapsfrom = op("\u2B36");
	macros.twoheadleftdbkarrow = op("\u2B37");
	macros.leftdotarrow = op("\u2B38");
	macros.nvleftarrowtail = op("\u2B39");
	macros.nVleftarrowtail = op("\u2B3A");
	macros.twoheadleftarrowtail = op("\u2B3B");
	macros.nvtwoheadleftarrowtail = op("\u2B3C");
	macros.nVtwoheadleftarrowtail = op("\u2B3D");
	macros.leftarrowx = op("\u2B3E");
	macros.leftcurvedarrow = op("\u2B3F");
	macros.equalleftarrow = op("\u2B40");
	macros.bsimilarleftarrow = op("\u2B41");
	macros.leftarrowbackapprox = op("\u2B42");
	macros.rightarrowgtr = op("\u2B43");
	macros.rightarrowsupset = op("\u2B44");
	macros.LLeftarrow = op("\u2B45");
	macros.RRightarrow = op("\u2B46");
	macros.bsimilarrightarrow = op("\u2B47");
	macros.rightarrowbackapprox = op("\u2B48"); 
	macros.similarleftarrow = op("\u2B49");
	macros.leftarrowapprox = op("\u2B4A");
	macros.leftarrowbsimilar = op("\u2B4B");
	macros.rightarrowbsimilar = op("\u2B4C");


	macros.mscrA = mathchar("&#x1D49C;");
	macros.mscrC = mathchar("&#x1D49E;");
	macros.mscrD = mathchar("&#x1D49F;");
	macros.mscrG = mathchar("&#x1D4A2;");
	macros.mscrJ = mathchar("&#x1D4A5;");
	macros.mscrK = mathchar("&#x1D4A6;");
	macros.mscrN = mathchar("&#x1D4A9;");
	macros.mscrO = mathchar("&#x1D4AA;");
	macros.mscrP = mathchar("&#x1D4AB;");
	macros.mscrQ = mathchar("&#x1D4AC;");
	macros.mscrS = mathchar("&#x1D4AE;");
	macros.mscrT = mathchar("&#x1D4AF;");
	macros.mscrU = mathchar("&#x1D4B0;");
	macros.mscrV = mathchar("&#x1D4B1;");
	macros.mscrW = mathchar("&#x1D4B2;");
	macros.mscrX = mathchar("&#x1D4B3;");
	macros.mscrY = mathchar("&#x1D4B4;");
	macros.mscrZ = mathchar("&#x1D4B5;"); 
	macros.mscra = mathchar("&#x1D4B6;");
	macros.mscrb = mathchar("&#x1D4B7;");
	macros.mscrc = mathchar("&#x1D4B8;");
	macros.mscrd = mathchar("&#x1D4B9;");
	macros.mscrf = mathchar("&#x1D4BB;"); 
	macros.mscrh = mathchar("&#x1D4BD;");
	macros.mscri = mathchar("&#x1D4BE;");
	macros.mscrj = mathchar("&#x1D4BF;");
	macros.mscrk = mathchar("&#x1D4C0;");
	macros.mscrl = mathchar("&#x1D4C1;");
	macros.mscrm = mathchar("&#x1D4C2;");
	macros.mscrn = mathchar("&#x1D4C3;");
	macros.mscrp = mathchar("&#x1D4C5;");
	macros.mscrq = mathchar("&#x1D4C6;");
	macros.mscrr = mathchar("&#x1D4C7;");
	macros.mscrs = mathchar("&#x1D4C8;");
	macros.mscrt = mathchar("&#x1D4C9;");
	macros.mscru = mathchar("&#x1D4CA;");
	macros.mscrv = mathchar("&#x1D4CB;");
	macros.mscrw = mathchar("&#x1D4CC;");
	macros.mscrx = mathchar("&#x1D4CD;");
	macros.mscry = mathchar("&#x1D4CE;");
	macros.mscrz = mathchar("&#x1D4CF;");
	macros.mfrakA = mathchar("&#x1D504;");
	macros.mfrakB = mathchar("&#x1D505;");
	macros.mfrakD = mathchar("&#x1D507;");
	macros.mfrakE = mathchar("&#x1D508;");
	macros.mfrakF = mathchar("&#x1D509;");
	macros.mfrakG = mathchar("&#x1D50A;");
	macros.mfrakJ = mathchar("&#x1D50D;");
	macros.mfrakK = mathchar("&#x1D50E;");
	macros.mfrakL = mathchar("&#x1D50F;");
	macros.mfrakM = mathchar("&#x1D510;");
	macros.mfrakN = mathchar("&#x1D511;");
	macros.mfrakO = mathchar("&#x1D512;");
	macros.mfrakP = mathchar("&#x1D513;");
	macros.mfrakQ = mathchar("&#x1D514;");
	macros.mfrakS = mathchar("&#x1D516;");
	macros.mfrakT = mathchar("&#x1D517;");
	macros.mfrakU = mathchar("&#x1D518;");
	macros.mfrakV = mathchar("&#x1D519;");
	macros.mfrakW = mathchar("&#x1D51A;");
	macros.mfrakX = mathchar("&#x1D51B;");
	macros.mfrakY = mathchar("&#x1D51C;");
	macros.mfraka = mathchar("&#x1D51E;");
	macros.mfrakb = mathchar("&#x1D51F;");
	macros.mfrakc = mathchar("&#x1D520;");
	macros.mfrakd = mathchar("&#x1D521;");
	macros.mfrake = mathchar("&#x1D522;");
	macros.mfrakf = mathchar("&#x1D523;");
	macros.mfrakg = mathchar("&#x1D524;");
	macros.mfrakh = mathchar("&#x1D525;");
	macros.mfraki = mathchar("&#x1D526;");
	macros.mfrakj = mathchar("&#x1D527;");
	macros.mfrakk = mathchar("&#x1D528;");
	macros.mfrakl = mathchar("&#x1D529;");
	macros.mfrakm = mathchar("&#x1D52A;");
	macros.mfrakn = mathchar("&#x1D52B;");
	macros.mfrako = mathchar("&#x1D52C;");
	macros.mfrakp = mathchar("&#x1D52D;");
	macros.mfrakq = mathchar("&#x1D52E;");
	macros.mfrakr = mathchar("&#x1D52F;");
	macros.mfraks = mathchar("&#x1D530;");
	macros.mfrakt = mathchar("&#x1D531;");
	macros.mfraku = mathchar("&#x1D532;");
	macros.mfrakv = mathchar("&#x1D533;");
	macros.mfrakw = mathchar("&#x1D534;");
	macros.mfrakx = mathchar("&#x1D535;");
	macros.mfraky = mathchar("&#x1D536;");
	macros.mfrakz = mathchar("&#x1D537;"); 
	macros.BbbA = mathchar("&#x1D538;");
	macros.BbbB = mathchar("&#x1D539;");
	macros.BbbD = mathchar("&#x1D53B;");
	macros.BbbE = mathchar("&#x1D53C;");
	macros.BbbF = mathchar("&#x1D53D;");
	macros.BbbG = mathchar("&#x1D53E;");
	macros.BbbI = mathchar("&#x1D540;");
	macros.BbbJ = mathchar("&#x1D541;");
	macros.BbbK = mathchar("&#x1D542;");
	macros.BbbL = mathchar("&#x1D543;");
	macros.BbbM = mathchar("&#x1D544;");
	macros.BbbO = mathchar("&#x1D546;");
	macros.BbbS = mathchar("&#x1D54A;");
	macros.BbbT = mathchar("&#x1D54B;");
	macros.BbbU = mathchar("&#x1D54C;"); 
	macros.BbbV = mathchar("&#x1D54D;");
	macros.BbbW = mathchar("&#x1D54E;");
	macros.BbbX = mathchar("&#x1D54F;");
	macros.BbbY = mathchar("&#x1D550;"); 
	macros.Bbba = mathchar("&#x1D552;");
	macros.Bbbb = mathchar("&#x1D553;");
	macros.Bbbc = mathchar("&#x1D554;");
	macros.Bbbd = mathchar("&#x1D555;");
	macros.Bbbe = mathchar("&#x1D556;");
	macros.Bbbf = mathchar("&#x1D557;");
	macros.Bbbg = mathchar("&#x1D558;");
	macros.Bbbh = mathchar("&#x1D559;");
	macros.Bbbi = mathchar("&#x1D55A;");
	macros.Bbbj = mathchar("&#x1D55B;");
	macros.Bbbk = mathchar("&#x1D55C;");
	macros.Bbbl = mathchar("&#x1D55D;");
	macros.Bbbm = mathchar("&#x1D55E;");
	macros.Bbbn = mathchar("&#x1D55F;");
	macros.Bbbo = mathchar("&#x1D560;");
	macros.Bbbp = mathchar("&#x1D561;");
	macros.Bbbq = mathchar("&#x1D562;");
	macros.Bbbr = mathchar("&#x1D563;");
	macros.Bbbs = mathchar("&#x1D564;");
	macros.Bbbt = mathchar("&#x1D565;");
	macros.Bbbu = mathchar("&#x1D566;");
	macros.Bbbv = mathchar("&#x1D567;");
	macros.Bbbw = mathchar("&#x1D568;");
	macros.Bbbx = mathchar("&#x1D569;");
	macros.Bbby = mathchar("&#x1D56A;");
	macros.Bbbz = mathchar("&#x1D56B;"); 
	macros.msansA = mathchar("&#x1D5A0;");
	macros.msansB = mathchar("&#x1D5A1;");
	macros.msansC = mathchar("&#x1D5A2;");
	macros.msansD = mathchar("&#x1D5A3;");
	macros.msansE = mathchar("&#x1D5A4;");
	macros.msansF = mathchar("&#x1D5A5;"); 
	macros.msansG = mathchar("&#x1D5A6;");
	macros.msansH = mathchar("&#x1D5A7;");
	macros.msansI = mathchar("&#x1D5A8;");
	macros.msansJ = mathchar("&#x1D5A9;");
	macros.msansK = mathchar("&#x1D5AA;");
	macros.msansL = mathchar("&#x1D5AB;");
	macros.msansM = mathchar("&#x1D5AC;");
	macros.msansN = mathchar("&#x1D5AD;");
	macros.msansO = mathchar("&#x1D5AE;");
	macros.msansP = mathchar("&#x1D5AF;");
	macros.msansQ = mathchar("&#x1D5B0;");
	macros.msansR = mathchar("&#x1D5B1;");
	macros.msansS = mathchar("&#x1D5B2;");
	macros.msansT = mathchar("&#x1D5B3;");
	macros.msansU = mathchar("&#x1D5B4;");
	macros.msansV = mathchar("&#x1D5B5;");
	macros.msansW = mathchar("&#x1D5B6;");
	macros.msansX = mathchar("&#x1D5B7;");
	macros.msansY = mathchar("&#x1D5B8;");
	macros.msansZ = mathchar("&#x1D5B9;"); 
	macros.msansa = mathchar("&#x1D5BA;");
	macros.msansb = mathchar("&#x1D5BB;");
	macros.msansc = mathchar("&#x1D5BC;");
	macros.msansd = mathchar("&#x1D5BD;");
	macros.msanse = mathchar("&#x1D5BE;");
	macros.msansf = mathchar("&#x1D5BF;");
	macros.msansg = mathchar("&#x1D5C0;");
	macros.msansh = mathchar("&#x1D5C1;");
	macros.msansi = mathchar("&#x1D5C2;");
	macros.msansj = mathchar("&#x1D5C3;");
	macros.msansk = mathchar("&#x1D5C4;");
	macros.msansl = mathchar("&#x1D5C5;");
	macros.msansm = mathchar("&#x1D5C6;");
	macros.msansn = mathchar("&#x1D5C7;");
	macros.msanso = mathchar("&#x1D5C8;");
	macros.msansp = mathchar("&#x1D5C9;");
	macros.msansq = mathchar("&#x1D5CA;");
	macros.msansr = mathchar("&#x1D5CB;");
	macros.msanss = mathchar("&#x1D5CC;");
	macros.msanst = mathchar("&#x1D5CD;");
	macros.msansu = mathchar("&#x1D5CE;");
	macros.msansv = mathchar("&#x1D5CF;");
	macros.msansw = mathchar("&#x1D5D0;"); 
	macros.msansx = mathchar("&#x1D5D1;");
	macros.msansy = mathchar("&#x1D5D2;");
	macros.msansz = mathchar("&#x1D5D3;"); 
	macros.mitsansA = mathchar("&#x1D608;");
	macros.mitsansB = mathchar("&#x1D609;");
	macros.mitsansC = mathchar("&#x1D60A;");
	macros.mitsansD = mathchar("&#x1D60B;");
	macros.mitsansE = mathchar("&#x1D60C;");
	macros.mitsansF = mathchar("&#x1D60D;");
	macros.mitsansG = mathchar("&#x1D60E;");
	macros.mitsansH = mathchar("&#x1D60F;");
	macros.mitsansI = mathchar("&#x1D610;");
	macros.mitsansJ = mathchar("&#x1D611;");
	macros.mitsansK = mathchar("&#x1D612;");
	macros.mitsansL = mathchar("&#x1D613;");
	macros.mitsansM = mathchar("&#x1D614;");
	macros.mitsansN = mathchar("&#x1D615;");
	macros.mitsansO = mathchar("&#x1D616;");
	macros.mitsansP = mathchar("&#x1D617;");
	macros.mitsansQ = mathchar("&#x1D618;");
	macros.mitsansR = mathchar("&#x1D619;");
	macros.mitsansS = mathchar("&#x1D61A;");
	macros.mitsansT = mathchar("&#x1D61B;");
	macros.mitsansU = mathchar("&#x1D61C;");
	macros.mitsansV = mathchar("&#x1D61D;");
	macros.mitsansW = mathchar("&#x1D61E;");
	macros.mitsansX = mathchar("&#x1D61F;");
	macros.mitsansY = mathchar("&#x1D620;");
	macros.mitsansZ = mathchar("&#x1D621;"); 
	macros.mitsansa = mathchar("&#x1D622;");
	macros.mitsansb = mathchar("&#x1D623;");
	macros.mitsansc = mathchar("&#x1D624;");
	macros.mitsansd = mathchar("&#x1D625;");
	macros.mitsanse = mathchar("&#x1D626;");
	macros.mitsansf = mathchar("&#x1D627;");
	macros.mitsansg = mathchar("&#x1D628;"); 
	macros.mitsansh = mathchar("&#x1D629;");
	macros.mitsansi = mathchar("&#x1D62A;");
	macros.mitsansj = mathchar("&#x1D62B;");
	macros.mitsansk = mathchar("&#x1D62C;");
	macros.mitsansl = mathchar("&#x1D62D;");
	macros.mitsansm = mathchar("&#x1D62E;");
	macros.mitsansn = mathchar("&#x1D62F;");
	macros.mitsanso = mathchar("&#x1D630;");
	macros.mitsansp = mathchar("&#x1D631;");
	macros.mitsansq = mathchar("&#x1D632;");
	macros.mitsansr = mathchar("&#x1D633;");
	macros.mitsanss = mathchar("&#x1D634;");
	macros.mitsanst = mathchar("&#x1D635;");
	macros.mitsansu = mathchar("&#x1D636;");
	macros.mitsansv = mathchar("&#x1D637;");
	macros.mitsansw = mathchar("&#x1D638;");
	macros.mitsansx = mathchar("&#x1D639;");
	macros.mitsansy = mathchar("&#x1D63A;");
	macros.mitsansz = mathchar("&#x1D63B;"); 
	macros.mttA = mathchar("&#x1D670;");
	macros.mttB = mathchar("&#x1D671;");
	macros.mttC = mathchar("&#x1D672;");
	macros.mttD = mathchar("&#x1D673;");
	macros.mttE = mathchar("&#x1D674;");
	macros.mttF = mathchar("&#x1D675;");
	macros.mttG = mathchar("&#x1D676;");
	macros.mttH = mathchar("&#x1D677;");
	macros.mttI = mathchar("&#x1D678;");
	macros.mttJ = mathchar("&#x1D679;");
	macros.mttK = mathchar("&#x1D67A;");
	macros.mttL = mathchar("&#x1D67B;");
	macros.mttM = mathchar("&#x1D67C;");
	macros.mttN = mathchar("&#x1D67D;");
	macros.mttO = mathchar("&#x1D67E;");
	macros.mttP = mathchar("&#x1D67F;");
	macros.mttQ = mathchar("&#x1D680;");
	macros.mttR = mathchar("&#x1D681;");
	macros.mttS = mathchar("&#x1D682;");
	macros.mttT = mathchar("&#x1D683;");
	macros.mttU = mathchar("&#x1D684;");
	macros.mttV = mathchar("&#x1D685;");
	macros.mttW = mathchar("&#x1D686;");
	macros.mttX = mathchar("&#x1D687;"); 
	macros.mttY = mathchar("&#x1D688;");
	macros.mttZ = mathchar("&#x1D689;"); 
	macros.mtta = mathchar("&#x1D68A;");
	macros.mttb = mathchar("&#x1D68B;");
	macros.mttc = mathchar("&#x1D68C;");
	macros.mttd = mathchar("&#x1D68D;");
	macros.mtte = mathchar("&#x1D68E;");
	macros.mttf = mathchar("&#x1D68F;");
	macros.mttg = mathchar("&#x1D690;");
	macros.mtth = mathchar("&#x1D691;");
	macros.mtti = mathchar("&#x1D692;");
	macros.mttj = mathchar("&#x1D693;");
	macros.mttk = mathchar("&#x1D694;");
	macros.mttl = mathchar("&#x1D695;");
	macros.mttm = mathchar("&#x1D696;");
	macros.mttn = mathchar("&#x1D697;");
	macros.mtto = mathchar("&#x1D698;");
	macros.mttp = mathchar("&#x1D699;");
	macros.mttq = mathchar("&#x1D69A;");
	macros.mttr = mathchar("&#x1D69B;");
	macros.mtts = mathchar("&#x1D69C;");
	macros.mttt = mathchar("&#x1D69D;");
	macros.mttu = mathchar("&#x1D69E;");
	macros.mttv = mathchar("&#x1D69F;");
	macros.mttw = mathchar("&#x1D6A0;");
	macros.mttx = mathchar("&#x1D6A1;");
	macros.mtty = mathchar("&#x1D6A2;");
	macros.mttz = mathchar("&#x1D6A3;");
	macros.mbfscrA = mathchar("&#x1D4D0;");
	macros.mbfscrB = mathchar("&#x1D4D1;");
	macros.mbfscrC = mathchar("&#x1D4D2;");
	macros.mbfscrD = mathchar("&#x1D4D3;");
	macros.mbfscrE = mathchar("&#x1D4D4;");
	macros.mbfscrF = mathchar("&#x1D4D5;");
	macros.mbfscrG = mathchar("&#x1D4D6;");
	macros.mbfscrH = mathchar("&#x1D4D7;");
	macros.mbfscrI = mathchar("&#x1D4D8;");
	macros.mbfscrJ = mathchar("&#x1D4D9;");
	macros.mbfscrK = mathchar("&#x1D4DA;");
	macros.mbfscrL = mathchar("&#x1D4DB;");
	macros.mbfscrM = mathchar("&#x1D4DC;");
	macros.mbfscrN = mathchar("&#x1D4DD;");
	macros.mbfscrO = mathchar("&#x1D4DE;");
	macros.mbfscrP = mathchar("&#x1D4DF;");
	macros.mbfscrQ = mathchar("&#x1D4E0;");
	macros.mbfscrR = mathchar("&#x1D4E1;");
	macros.mbfscrS = mathchar("&#x1D4E2;");
	macros.mbfscrT = mathchar("&#x1D4E3;");
	macros.mbfscrU = mathchar("&#x1D4E4;");
	macros.mbfscrV = mathchar("&#x1D4E5;");
	macros.mbfscrW = mathchar("&#x1D4E6;");
	macros.mbfscrX = mathchar("&#x1D4E7;");
	macros.mbfscrY = mathchar("&#x1D4E8;");
	macros.mbfscrZ = mathchar("&#x1D4E9;");
	macros.mbfscra = mathchar("&#x1D4EA;");
	macros.mbfscrb = mathchar("&#x1D4EB;");
	macros.mbfscrc = mathchar("&#x1D4EC;");
	macros.mbfscrd = mathchar("&#x1D4ED;");
	macros.mbfscre = mathchar("&#x1D4EE;");
	macros.mbfscrf = mathchar("&#x1D4EF;");
	macros.mbfscrg = mathchar("&#x1D4F0;");
	macros.mbfscrh = mathchar("&#x1D4F1;");
	macros.mbfscri = mathchar("&#x1D4F2;");
	macros.mbfscrj = mathchar("&#x1D4F3;");
	macros.mbfscrk = mathchar("&#x1D4F4;");
	macros.mbfscrl = mathchar("&#x1D4F5;");
	macros.mbfscrm = mathchar("&#x1D4F6;");
	macros.mbfscrn = mathchar("&#x1D4F7;");
	macros.mbfscro = mathchar("&#x1D4F8;");
	macros.mbfscrp = mathchar("&#x1D4F9;");
	macros.mbfscrq = mathchar("&#x1D4FA;");
	macros.mbfscrr = mathchar("&#x1D4FB;");
	macros.mbfscrs = mathchar("&#x1D4FC;");
	macros.mbfscrt = mathchar("&#x1D4FD;");
	macros.mbfscru = mathchar("&#x1D4FE;");
	macros.mbfscrv = mathchar("&#x1D4FF;");
	macros.mbfscrw = mathchar("&#x1D500;");
	macros.mbfscrx = mathchar("&#x1D501;");
	macros.mbfscry = mathchar("&#x1D502;");
	macros.mbfscrz = mathchar("&#x1D503;");
	macros.mbffrakA = mathchar("&#x1D56C;");
	macros.mbffrakB = mathchar("&#x1D56D;");
	macros.mbffrakC = mathchar("&#x1D56E;");
	macros.mbffrakD = mathchar("&#x1D56F;");
	macros.mbffrakE = mathchar("&#x1D570;");
	macros.mbffrakF = mathchar("&#x1D571;");
	macros.mbffrakG = mathchar("&#x1D572;");
	macros.mbffrakH = mathchar("&#x1D573;");
	macros.mbffrakI = mathchar("&#x1D574;");
	macros.mbffrakJ = mathchar("&#x1D575;");
	macros.mbffrakK = mathchar("&#x1D576;");
	macros.mbffrakL = mathchar("&#x1D577;");
	macros.mbffrakM = mathchar("&#x1D578;");
	macros.mbffrakN = mathchar("&#x1D579;");
	macros.mbffrakO = mathchar("&#x1D57A;");
	macros.mbffrakP = mathchar("&#x1D57B;");
	macros.mbffrakQ = mathchar("&#x1D57C;");
	macros.mbffrakR = mathchar("&#x1D57D;");
	macros.mbffrakS = mathchar("&#x1D57E;");
	macros.mbffrakT = mathchar("&#x1D57F;");
	macros.mbffrakU = mathchar("&#x1D580;");
	macros.mbffrakV = mathchar("&#x1D581;");
	macros.mbffrakW = mathchar("&#x1D582;");
	macros.mbffrakX = mathchar("&#x1D583;");
	macros.mbffrakY = mathchar("&#x1D584;");
	macros.mbffrakZ = mathchar("&#x1D585;");
	macros.mbffraka = mathchar("&#x1D586;");
	macros.mbffrakb = mathchar("&#x1D587;");
	macros.mbffrakc = mathchar("&#x1D588;");
	macros.mbffrakd = mathchar("&#x1D589;");
	macros.mbffrake = mathchar("&#x1D58A;");
	macros.mbffrakf = mathchar("&#x1D58B;");
	macros.mbffrakg = mathchar("&#x1D58C;");
	macros.mbffrakh = mathchar("&#x1D58D;");
	macros.mbffraki = mathchar("&#x1D58E;");
	macros.mbffrakj = mathchar("&#x1D58F;");
	macros.mbffrakk = mathchar("&#x1D590;");
	macros.mbffrakl = mathchar("&#x1D591;");
	macros.mbffrakm = mathchar("&#x1D592;");
	macros.mbffrakn = mathchar("&#x1D593;");
	macros.mbffrako = mathchar("&#x1D594;");
	macros.mbffrakp = mathchar("&#x1D595;");
	macros.mbffrakq = mathchar("&#x1D596;");
	macros.mbffrakr = mathchar("&#x1D597;");
	macros.mbffraks = mathchar("&#x1D598;");
	macros.mbffrakt = mathchar("&#x1D599;");
	macros.mbffraku = mathchar("&#x1D59A;");
	macros.mbffrakv = mathchar("&#x1D59B;");
	macros.mbffrakw = mathchar("&#x1D59C;");
	macros.mbffrakx = mathchar("&#x1D59D;");
	macros.mbffraky = mathchar("&#x1D59E;");
	macros.mbffrakz = mathchar("&#x1D59F;");
	macros.mbfsansA = mathchar("&#x1D5D4;");
	macros.mbfsansB = mathchar("&#x1D5D5;");
	macros.mbfsansC = mathchar("&#x1D5D6;");
	macros.mbfsansD = mathchar("&#x1D5D7;");
	macros.mbfsansE = mathchar("&#x1D5D8;");
	macros.mbfsansF = mathchar("&#x1D5D9;");
	macros.mbfsansG = mathchar("&#x1D5DA;");
	macros.mbfsansH = mathchar("&#x1D5DB;");
	macros.mbfsansI = mathchar("&#x1D5DC;");
	macros.mbfsansJ = mathchar("&#x1D5DD;");
	macros.mbfsansK = mathchar("&#x1D5DE;");
	macros.mbfsansL = mathchar("&#x1D5DF;");
	macros.mbfsansM = mathchar("&#x1D5E0;");
	macros.mbfsansN = mathchar("&#x1D5E1;");
	macros.mbfsansO = mathchar("&#x1D5E2;");
	macros.mbfsansP = mathchar("&#x1D5E3;");
	macros.mbfsansQ = mathchar("&#x1D5E4;");
	macros.mbfsansR = mathchar("&#x1D5E5;");
	macros.mbfsansS = mathchar("&#x1D5E6;");
	macros.mbfsansT = mathchar("&#x1D5E7;");
	macros.mbfsansU = mathchar("&#x1D5E8;");
	macros.mbfsansV = mathchar("&#x1D5E9;");
	macros.mbfsansW = mathchar("&#x1D5EA;");
	macros.mbfsansX = mathchar("&#x1D5EB;");
	macros.mbfsansY = mathchar("&#x1D5EC;");
	macros.mbfsansZ = mathchar("&#x1D5ED;");
	macros.mbfsansa = mathchar("&#x1D5EE;");
	macros.mbfsansb = mathchar("&#x1D5EF;");
	macros.mbfsansc = mathchar("&#x1D5F0;");
	macros.mbfsansd = mathchar("&#x1D5F1;");
	macros.mbfsanse = mathchar("&#x1D5F2;");
	macros.mbfsansf = mathchar("&#x1D5F3;");
	macros.mbfsansg = mathchar("&#x1D5F4;");
	macros.mbfsansh = mathchar("&#x1D5F5;");
	macros.mbfsansi = mathchar("&#x1D5F6;");
	macros.mbfsansj = mathchar("&#x1D5F7;");
	macros.mbfsansk = mathchar("&#x1D5F8;");
	macros.mbfsansl = mathchar("&#x1D5F9;");
	macros.mbfsansm = mathchar("&#x1D5FA;");
	macros.mbfsansn = mathchar("&#x1D5FB;");
	macros.mbfsanso = mathchar("&#x1D5FC;");
	macros.mbfsansp = mathchar("&#x1D5FD;");
	macros.mbfsansq = mathchar("&#x1D5FE;");
	macros.mbfsansr = mathchar("&#x1D5FF;");
	macros.mbfsanss = mathchar("&#x1D600;");
	macros.mbfsanst = mathchar("&#x1D601;");
	macros.mbfsansu = mathchar("&#x1D602;");
	macros.mbfsansv = mathchar("&#x1D603;");
	macros.mbfsansw = mathchar("&#x1D604;");
	macros.mbfsansx = mathchar("&#x1D605;");
	macros.mbfsansy = mathchar("&#x1D606;");
	macros.mbfsansz = mathchar("&#x1D607;");
	macros.mbfitsansA = mathchar("&#x1D63C;");
	macros.mbfitsansB = mathchar("&#x1D63D;");
	macros.mbfitsansC = mathchar("&#x1D63E;");
	macros.mbfitsansD = mathchar("&#x1D63F;");
	macros.mbfitsansE = mathchar("&#x1D640;");
	macros.mbfitsansF = mathchar("&#x1D641;");
	macros.mbfitsansG = mathchar("&#x1D642;");
	macros.mbfitsansH = mathchar("&#x1D643;");
	macros.mbfitsansI = mathchar("&#x1D644;");
	macros.mbfitsansJ = mathchar("&#x1D645;");
	macros.mbfitsansK = mathchar("&#x1D646;");
	macros.mbfitsansL = mathchar("&#x1D647;");
	macros.mbfitsansM = mathchar("&#x1D648;");
	macros.mbfitsansN = mathchar("&#x1D649;");
	macros.mbfitsansO = mathchar("&#x1D64A;");
	macros.mbfitsansP = mathchar("&#x1D64B;");
	macros.mbfitsansQ = mathchar("&#x1D64C;");
	macros.mbfitsansR = mathchar("&#x1D64D;");
	macros.mbfitsansS = mathchar("&#x1D64E;");
	macros.mbfitsansT = mathchar("&#x1D64F;");
	macros.mbfitsansU = mathchar("&#x1D650;");
	macros.mbfitsansV = mathchar("&#x1D651;");
	macros.mbfitsansW = mathchar("&#x1D652;");
	macros.mbfitsansX = mathchar("&#x1D653;");
	macros.mbfitsansY = mathchar("&#x1D654;");
	macros.mbfitsansZ = mathchar("&#x1D655;");
	macros.mbfitsansa = mathchar("&#x1D656;");
	macros.mbfitsansb = mathchar("&#x1D657;");
	macros.mbfitsansc = mathchar("&#x1D658;");
	macros.mbfitsansd = mathchar("&#x1D659;");
	macros.mbfitsanse = mathchar("&#x1D65A;");
	macros.mbfitsansf = mathchar("&#x1D65B;");
	macros.mbfitsansg = mathchar("&#x1D65C;");
	macros.mbfitsansh = mathchar("&#x1D65D;");
	macros.mbfitsansi = mathchar("&#x1D65E;");
	macros.mbfitsansj = mathchar("&#x1D65F;");
	macros.mbfitsansk = mathchar("&#x1D660;");
	macros.mbfitsansl = mathchar("&#x1D661;");
	macros.mbfitsansm = mathchar("&#x1D662;");
	macros.mbfitsansn = mathchar("&#x1D663;");
	macros.mbfitsanso = mathchar("&#x1D664;");
	macros.mbfitsansp = mathchar("&#x1D665;");
	macros.mbfitsansq = mathchar("&#x1D666;");
	macros.mbfitsansr = mathchar("&#x1D667;");
	macros.mbfitsanss = mathchar("&#x1D668;");
	macros.mbfitsanst = mathchar("&#x1D669;");
	macros.mbfitsansu = mathchar("&#x1D66A;");
	macros.mbfitsansv = mathchar("&#x1D66B;");
	macros.mbfitsansw = mathchar("&#x1D66C;");
	macros.mbfitsansx = mathchar("&#x1D66D;");
	macros.mbfitsansy = mathchar("&#x1D66E;");
	macros.mbfitsansz = mathchar("&#x1D66F;");
	macros.mbfsansAlpha = mathchar("&#x1D756;");
	macros.mbfsansBeta = mathchar("&#x1D757;");
	macros.mbfsansGamma = mathchar("&#x1D758;");
	macros.mbfsansDelta = mathchar("&#x1D759;");
	macros.mbfsansEpsilon = mathchar("&#x1D75A;");
	macros.mbfsansZeta = mathchar("&#x1D75B;");
	macros.mbfsansEta = mathchar("&#x1D75C;");
	macros.mbfsansTheta = mathchar("&#x1D75D;");
	macros.mbfsansIota = mathchar("&#x1D75E;");
	macros.mbfsansKappa = mathchar("&#x1D75F;");
	macros.mbfsansLambda = mathchar("&#x1D760;");
	macros.mbfsansMu = mathchar("&#x1D761;");
	macros.mbfsansNu = mathchar("&#x1D762;");
	macros.mbfsansXi = mathchar("&#x1D763;");
	macros.mbfsansOmicron = mathchar("&#x1D764;");
	macros.mbfsansPi = mathchar("&#x1D765;");
	macros.mbfsansRho = mathchar("&#x1D766;");
	macros.mbfsansvarTheta = mathchar("&#x1D767;");
	macros.mbfsansSigma = mathchar("&#x1D768;");
	macros.mbfsansTau = mathchar("&#x1D769;");
	macros.mbfsansUpsilon = mathchar("&#x1D76A;");
	macros.mbfsansPhi = mathchar("&#x1D76B;");
	macros.mbfsansChi = mathchar("&#x1D76C;");
	macros.mbfsansPsi = mathchar("&#x1D76D;");
	macros.mbfsansOmega = mathchar("&#x1D76E;");
	macros.mbfsansalpha = mathchar("&#x1D770;");
	macros.mbfsansbeta = mathchar("&#x1D771;");
	macros.mbfsansgamma = mathchar("&#x1D772;");
	macros.mbfsansdelta = mathchar("&#x1D773;");
	macros.mbfsansepsilon = mathchar("&#x1D774;");
	macros.mbfsanszeta = mathchar("&#x1D775;");
	macros.mbfsanseta = mathchar("&#x1D776;");
	macros.mbfsanstheta = mathchar("&#x1D777;");
	macros.mbfsansiota = mathchar("&#x1D778;");
	macros.mbfsanskappa = mathchar("&#x1D779;");
	macros.mbfsanslambda = mathchar("&#x1D77A;");
	macros.mbfsansmu = mathchar("&#x1D77B;");
	macros.mbfsansnu = mathchar("&#x1D77C;");
	macros.mbfsansxi = mathchar("&#x1D77D;");
	macros.mbfsansomicron = mathchar("&#x1D77E;");
	macros.mbfsanspi = mathchar("&#x1D77F;");
	macros.mbfsansrho = mathchar("&#x1D780;");
	macros.mbfsansvarsigma = mathchar("&#x1D781;");
	macros.mbfsanssigma = mathchar("&#x1D782;");
	macros.mbfsanstau = mathchar("&#x1D783;");
	macros.mbfsansupsilon = mathchar("&#x1D784;");
	macros.mbfsansphi = mathchar("&#x1D785;");
	macros.mbfsanschi = mathchar("&#x1D786;");
	macros.mbfsanspsi = mathchar("&#x1D787;");
	macros.mbfsansomega = mathchar("&#x1D788;");
	macros.mbfsanspartial = mathchar("&#x1D789;");
	macros.mbfsansvarepsilon = mathchar("&#x1D78A;");
	macros.mbfsansvartheta = mathchar("&#x1D78B;");
	macros.mbfsansvarkappa = mathchar("&#x1D78C;");
	macros.mbfsansvarphi = mathchar("&#x1D78D;");
	macros.mbfsansvarrho = mathchar("&#x1D78E;");
	macros.mbfsansvarpi = mathchar("&#x1D78F;");
	macros.mbfitsansAlpha = mathchar("&#x1D790;");
	macros.mbfitsansBeta = mathchar("&#x1D791;");
	macros.mbfitsansGamma = mathchar("&#x1D792;");
	macros.mbfitsansDelta = mathchar("&#x1D793;");
	macros.mbfitsansEpsilon = mathchar("&#x1D794;");
	macros.mbfitsansZeta = mathchar("&#x1D795;");
	macros.mbfitsansEta = mathchar("&#x1D796;");
	macros.mbfitsansTheta = mathchar("&#x1D797;");
	macros.mbfitsansIota = mathchar("&#x1D798;");
	macros.mbfitsansKappa = mathchar("&#x1D799;");
	macros.mbfitsansLambda = mathchar("&#x1D79A;");
	macros.mbfitsansMu = mathchar("&#x1D79B;");
	macros.mbfitsansNu = mathchar("&#x1D79C;");
	macros.mbfitsansXi = mathchar("&#x1D79D;");
	macros.mbfitsansOmicron = mathchar("&#x1D79E;");
	macros.mbfitsansPi = mathchar("&#x1D79F;");
	macros.mbfitsansRho = mathchar("&#x1D7A0;");
	macros.mbfitsansvarTheta = mathchar("&#x1D7A1;");
	macros.mbfitsansSigma = mathchar("&#x1D7A2;");
	macros.mbfitsansTau = mathchar("&#x1D7A3;");
	macros.mbfitsansUpsilon = mathchar("&#x1D7A4;");
	macros.mbfitsansPhi = mathchar("&#x1D7A5;");
	macros.mbfitsansChi = mathchar("&#x1D7A6;");
	macros.mbfitsansPsi = mathchar("&#x1D7A7;");
	macros.mbfitsansOmega = mathchar("&#x1D7A8;");
	macros.mbfitsansalpha = mathchar("&#x1D7AA;");
	macros.mbfitsansbeta = mathchar("&#x1D7AB;");
	macros.mbfitsansgamma = mathchar("&#x1D7AC;");
	macros.mbfitsansdelta = mathchar("&#x1D7AD;");
	macros.mbfitsansepsilon = mathchar("&#x1D7AE;");
	macros.mbfitsanszeta = mathchar("&#x1D7AF;");
	macros.mbfitsanseta = mathchar("&#x1D7B0;");
	macros.mbfitsanstheta = mathchar("&#x1D7B1;");
	macros.mbfitsansiota = mathchar("&#x1D7B2;");
	macros.mbfitsanskappa = mathchar("&#x1D7B3;");
	macros.mbfitsanslambda = mathchar("&#x1D7B4;");
	macros.mbfitsansmu = mathchar("&#x1D7B5;");
	macros.mbfitsansnu = mathchar("&#x1D7B6;");
	macros.mbfitsansxi = mathchar("&#x1D7B7;");
	macros.mbfitsansomicron = mathchar("&#x1D7B8;");
	macros.mbfitsanspi = mathchar("&#x1D7B9;");
	macros.mbfitsansrho = mathchar("&#x1D7BA;");
	macros.mbfitsansvarsigma = mathchar("&#x1D7BB;");
	macros.mbfitsanssigma = mathchar("&#x1D7BC;");
	macros.mbfitsanstau = mathchar("&#x1D7BD;");
	macros.mbfitsansupsilon = mathchar("&#x1D7BE;");
	macros.mbfitsansphi = mathchar("&#x1D7BF;");
	macros.mbfitsanschi = mathchar("&#x1D7C0;");
	macros.mbfitsanspsi = mathchar("&#x1D7C1;");
	macros.mbfitsansomega = mathchar("&#x1D7C2;");
	macros.mbfitsanspartial = mathchar("&#x1D7C3;");
	macros.mbfitsansvarepsilon = mathchar("&#x1D7C4;");
	macros.mbfitsansvartheta = mathchar("&#x1D7C5;");
	macros.mbfitsansvarkappa = mathchar("&#x1D7C6;");
	macros.mbfitsansvarphi = mathchar("&#x1D7C7;");
	macros.mbfitsansvarrho = mathchar("&#x1D7C8;");
	macros.mbfitsansvarpi = mathchar("&#x1D7C9;");
	macros.matheth = mathchar("\u00F0");
	macros.BbbC = mathchar("\u2102");
	macros.mscrg = mathchar("\u210A");
	macros.mscrH = mathchar("\u210B");
	macros.mfrakH = mathchar("\u210C");
	macros.BbbH = mathchar("\u210D");
	macros.hslash = mathchar("\u210F");
	macros.mscrI = mathchar("\u2110");
	macros.Im = mathchar("\u2111");
	macros.mscrL = mathchar("\u2112");
	macros.ell = mathchar("\u2113");
	macros.BbbN = mathchar("\u2115");
	macros.wp = mathchar("\u2118");
	macros.BbbP = mathchar("\u2119");
	macros.BbbQ = mathchar("\u211A");
	macros.mscrR = mathchar("\u211B");
	macros.Re = mathchar("\u211C");
	macros.BbbR = mathchar("\u211D");
	macros.BbbZ = mathchar("\u2124");
	macros.mfrakZ = mathchar("\u2128");
	macros.turnediota = mathchar("\u2129");
	macros.Angstrom = mathchar("\u212B");
	macros.mscrB = mathchar("\u212C");
	macros.mfrakC = mathchar("\u212D");
	macros.mscre = mathchar("\u212F");
	macros.mscrE = mathchar("\u2130");
	macros.mscrF = mathchar("\u2131");
	macros.mscrM = mathchar("\u2133");
	macros.mscro = mathchar("\u2134");
	macros.aleph = mathchar("\u2135");
	macros.beth = mathchar("\u2136");
	macros.gimel = mathchar("\u2137");
	macros.daleth = mathchar("\u2138");
	macros.Bbbgamma = mathchar("\u213D");
	macros.BbbGamma = mathchar("\u213E");
	macros.BbbPi = mathchar("\u213F");
	macros.partial = mathchar("\u2202");
	macros.nabla = mathchar("\u2207");
	macros.imath = mathchar("&#x1D6A4;");
	macros.jmath = mathchar("&#x1D6A5;");
	macros.mbfnabla = mathchar("&#x1D6C1;");
	macros.mitnabla = mathchar("&#x1D6FB;");
	macros.mbfitnabla = mathchar("&#x1D735;");
	macros.mbfsansnabla = mathchar("&#x1D76F;");
	macros.mbfitsansnabla = mathchar("&#x1D7A9;");
	macros.mbfDigamma = mathchar("&#x1D7CA;");
	macros.mbfdigamma = mathchar("&#x1D7CB;");

	macros.hbar = VBM('\u0127')
	macros.Hbar = VBM('\u0126')

	// aliases
	macros['+'] = macros.plus;
	macros['-'] = macros.minus;
	macros['%'] = macros.percent;
	macros['.'] = macros.period;
	macros[','] = macros.comma;
	macros[':'] = macros.colon;
	macros[';'] = macros.semicolon;
	macros['!'] = macros.exclam;
	macros['/'] = macros.mathslash;
	macros['*'] = macros.ast;
	macros['<'] = macros.less;
	macros['='] = macros.equal;
	macros['>'] = macros.greater;
	macros['/\\'] = macros.wedge;
	macros['\\/'] = macros.vee;
	macros['\''] = macros.prime;
	macros['\'\''] = macros.dprime;
	macros['\'\'\''] = macros.triprime;
	macros['->'] = macros.rightarrow;
	macros['<-'] = macros.leftarrow;
	macros['=>'] = macros.Rightarrow;
	macros['<='] = macros.leq;
	macros['>='] = macros.geq;

})();